{"pageProps":{"post":{"title":"CSS-in-JS 라이브러리들에 대한 고찰","description":"다양한 CSS-in-JS 라이브러리가 있는데 이들은 어떤 차이점이 있을까? 더 나아가 어떤 상황에서 어떤 라이브러리를 사용하면 좋을까? 🍀","icon":"","image":"","tags":["styled-components","emotion","linaria","vanilla-extract","stitches"],"draft":false,"date":"2022-02-11","content":"\n## 들어가면서\n\n#### 이 글의 목적\n\n- 다양한 CSS-in-JS 라이브러리가 있는데 이들은 어떤 차이점이 있을까?\n- 더 나아가 어떤 상황에서 어떤 라이브러리를 사용하면 좋을까?\n\n<br />\n\n#### CSS-in-JS가 대세인 이유\n\n- 중복되지 않는 class 이름을 고려할 필요가 없다.\n- JS 코드와 CSS가 상태 값을 공유할 수 있다.\n- 컴포넌트와 스타일 코드를 쉽게 오갈 수 있다.\n- 자동으로 [vendor-prefix](https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix)을 붙여준다.\n\n⇒ **개발 친화적 🌻  DX ( Developer Experience )**\n\n<br />\n\n2020, 2021에 들어서서 많은 CSS-in-JS 라이브러리가 등장했다.\n\n- [https://2021.stateofcss.com/en-US/technologies/css-in-js](https://2021.stateofcss.com/en-US/technologies/css-in-js)\n- [https://risingstars.js.org/2021/en#section-css-in-js](https://risingstars.js.org/2021/en#section-css-in-js)\n\ncss-in-js의 동작 방식은 크게 **runtime**, **zero-runtime** 으로 나눠진다.\nruntime이 반드시 성능저하를 발생시키진 않고 프로젝트 규모와 상황에 따라 달라질 수 있음을 염두하고 살펴보도록 하자.\n\n---\n\n## **runtime**\n\n**javascript runtime에서 필요한 CSS를 동적으로 만들어 적용한다.**\n\n대표적으로 잘 알려진 [styled-component](https://styled-components.com/), [emotion](https://emotion.sh/docs/introduction) 이 있다.\n\n아래 styled-components로 만든 예시를 살펴보자.\n버튼의 상태가 바뀌면서 style 코드가 동적으로 생성되어 삽입되는 것을 볼 수 있다.\n\n![](<https://images.velog.io/images/bepyan/post/7d5ee0a5-d698-4615-a592-15847466cacb/%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB-%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%E1%86%A8-2022-01-25-%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB-12.42.01%20(1).gif>)\n\n- 개발모드에서는 `<style>` 태그에 style을 추가하는 방식을 사용한다.\n\n  - 디버깅에 이점이 있다고 한다.\n\n- 배포 모드에서는 stylesSheet을 [CSSStylesSheet.insertRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule) 통해 바로[CSSOM](https://dkmqflx.github.io/frontend/2020/09/14/jscssom/)에 주입한다.\n  - 성능상의 이짐이 있다고 한다.\n\n<br />\n\n**css-loader가 필요 없다.**\n\n- css파일을 생성하지 않기에 webpack에서 css-loader가 필요 없다.\n\n<br />\n\n#### 런타임 오버헤드가 발생할 수 있다.\n\n- 런타임에서 동적으로 스타일을 생성하기에 스타일이 수시로 변경된다면...\n- ex) 스크롤, 드래그 앤 드랍 관련 복잡한 에니메이션\n\n<br />\n\n[**styled-components 과 emotion의 차이를 알고 싶다면?**](./styled-components-vs-emotion)\n\n---\n\n## **zero-runtime**\n\n런타임에 css를 생성하지않으면서 **페이지를 더 빨리 로드할 수 있다.**\nJS 번들에서 styles코드를 모두 실행되어야 페이지가 로드된다.\n\n![](https://images.velog.io/images/bepyan/post/a45cf494-a87a-4b4d-97d0-bbc857c36d0d/image.png)\n\nruntime에서 스타일이 생성되지 않는다.\n\n- props 변화에 따른 동적인 스타일은 css 변수를 통해 적용한다.\n\n<br />\n\n빌드 타임에 css를 생성해야기에 webpack 설정을 해야 한다.\n\n- React CRA을 사용한다면 eject해서 webpack 설정해야 하는데 굉장히 번거롭다.\n- runtime에서 css polyfill를 사용할 수 없어 브라우저 버전 이슈가 있을 수 있다.\n\n<br />\n\n**첫 load는 빠르지만, 첫 paint는 느릴 수 있다.**\n\n![](https://images.velog.io/images/bepyan/post/2f0e8b75-f2f9-43b0-93af-671bdeef3cb3/image.png)\n\ncss styles까지 모두 로드가 되어야 첫 paint를 시작된다.\n반면 runtime에서는 style를 로드하면서 첫 paint를 시작할 수 있다. ( 로딩화면 )\n\n<br />\n\n대표적인 라이브러리\n\n- [linaria](https://linaria.dev/)\n  - styled-component 문법 그대로 사용해서 러닝커브가 없을 것 같다.\n  - [styled-components와 속도 비교](https://pustelto.com/blog/css-vs-css-in-js-perf/)\n  - mini-css-extract-plugin에 의해 critical css를 판단할 수 없는 경우 linaria의 collect를 사용가능하다.\n- [vanilla-extract](https://vanilla-extract.style/)\n  - 사실상 typescript로 css를 작성하는 라이브러리. (`.css.ts`)\n  - [css-module](https://github.com/css-modules/css-modules)와 거의 흡사하다.\n  - tagged template literals를 지원하지 않는다.\n  - 현재 굉장히 높은 만족도와 관심을 받고 있다.\n\n<br />\n\n### critical CSS\n\n- 초기 화면에서 필요한 CSS이다.\n- critical CSS 추출과 runtime CSS 생성은 trade-off 관계를 갖고 있다.\n- SSR에서 중요한 쟁점이다. 사전에 CSS 추출을 할 것인가?\n\n---\n\n## **near-zero-runtime** (stitches)\n\n> [**stitches**](https://stitches.dev/)\n>\n> - SSR 환경에서도 잘 동작이 되도록 세팅이 되었다.\n> - **runtime overhead와 zero-runtime의 제약을 해결 ⇒ 빠르다** > [benchmarks](https://stitches.dev/docs/benchmarks)\n\n<br />\n\n런타임에서 각각의 CSS 프로퍼티가 Atomic CSS처럼 적용된다.\n\n- 반복되는 style을 atomics class로 변환하여 class를 재사용한다.\n- 불필요한 런타임에서의 props interpolations를 줄인다.\n\n```jsx\nconst StitchesButton1 = styled('button', {\n  color: 'red',\n  fontSize: 24,\n});\n\nconst StitchesButton2 = styled('button', {\n  color: 'red',\n  fontSize: 24,\n});\n```\n\n![](https://images.velog.io/images/bepyan/post/763654d2-4d56-4ab6-9999-ab5f270611d2/image.png)\n\n하지만 style 순서가 바뀌면 재사용할 수 없다.\n\n```jsx\nconst StitchesButton2 = styled('button', {\n  fontSize: 24,\n  color: 'red',\n});\n```\n\n[참고](https://github.com/mui-org/material-ui/issues/22342#issuecomment-679468200)\n\n<br />\n\nemotion과 같이 [CSSStylesSheet.insertRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule) 을 사용하여 [CSSOM](https://dkmqflx.github.io/frontend/2020/09/14/jscssom/)에 직접 삽입한다.\n\n사전에 정의한 [variants](https://stitches.dev/docs/variants)에 의해서 runtime 스타일링이 진행된다.\n\n- 공식문서가 굉장히 친절하고 친절하게 되어 있어서\n\n최고의 개발경험 제공\n\n- 사전에 정의한 [테마 변수](https://stitches.dev/docs/tokens), variants 자동완성 제공\n\n그리고 한계점...\n\n- css style extraction이 되지 않는다.\n- tagged template literals를 지원하지 않는다.\n  Object syntax을 사용하는 이유는 keep the bundle size to a minimum이라고 한다.\n\n### Atomic CSS\n\n- 필요한 수치를 입력을 해두면 필요한 CSS를 자동으로 생성을 해두는 주문형(on-demand) 패러다임\n- 대표적인 라이브러리는 [tailwindcss](https://tailwindcss.com/)\n- 중복된 style 코드를 atomic한 클래스로 묶음으로 style sheet 사이즈를 줄인다.\n  - [Facebook에서 Atomic CSS 도입으로 style sheet사이즈를 80% 줄인 사례](https://engineering.fb.com/2020/05/08/web/facebook-redesign/)\n\n---\n\n## 맺으면서\n\n### CSS-in-JS 사용에 고려할 사항\n\n- runtime overhead가 발생할 될 서비스인가?\n  - 없다면 기존 runtime CSS-in-JS를 써도 전혀 문제가 없을 것이다.\n- 직접 스타일을 작성하는가? 아니면 CSS 소스를 사용하는가?\n  - tagged template literals를 지원하지 않는다면 CSS 소스를 옮기기 굉장히 불편할 것이다.\n  - 따라서 stitches와 vanilla-extract의 도입은 CSS 변환의 수고스러움을 감수해야 할 것이다.\n- SSR인가 CSR인가?\n  - SSR를 설정하기 불편한 것이 있고 Critical CSS 최적화된 것이 있다.\n  - CSR는 runtime stylesheets, SSR는 static CSS에 이점을 갖는다. [참고](https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output#to-conclude)\n\n<br />\n\n멋진 개발팀들에서는 어떻게 라이브러리를 선택하는지 살펴보면 큰 도움이 될 것이다.\n\n- [material-ul가 emotion을 선택한 이유](https://github.com/mui-org/material-ui/issues/22342)\n- [shopify가 vanilla-extract를 선택한 이유](https://github.com/Shopify/foundational-design-system-proto/discussions/44#discussioncomment-888380)\n\n<br />\n\n개인적으로 생각했을 땐 결국 `개발 친화적 🌻`이 제일 중요한 이슈인 것 같다.\n\n- 개발팀에서 편하게 디자인 시스템을 구축할 수 있는가?\n- 개발 리소스 비용이 크기 때문...\n\n---\n\n### 프론트엔드의 흐름, build-time?\n\n현대 프론트엔드의 작업흐름이 build-time에서 최적화가 이뤄지고 있다.\n\n- 최신 CSS-in-JS 라이브러리들이 **build-time**(zero-runtime)으로 개발되고 있다.\n- **TypeScript**를 통해서 build-time 및 run-time 이전에 type 체크, code IntelliSense를 제공해준다.\n- **webpack, babel**를 통해서 다양한 브라우저에서 동작하는 앱을 만든다.\n- Next.js가 각광을 받으면서 CSR에서 **SSR**로 웹이 개발되어 가고 있다.\n- React, Vue를 넘어서 현재 **Svelte**가 많은 사람들의 주목을 받고 있다.\n  - run-time에서 Virtual DOM를 통해 비교하여 변경사항을 반영하는 것이 아닌,\n    build-time에서 어느 부분이 변경될지 파악하고 DOM을 업데이트하는 효율적인 명령 코드로 변환하여 사용한다.\n\n<br />\n\njavascript → typescript → build-time → compiler → **c++**\n\n![https://c.tenor.com/pl54bxCr1x8AAAAM/wow-omg.gif](https://c.tenor.com/pl54bxCr1x8AAAAM/wow-omg.gif)\n\n대학교 1학년 때부터 세뇌받듯이 들었던 말이 `프로그래밍 언어의 근본은 C++` 이다.\n~~javascript, python 같은 스크립트 언어는 감히 고개를 내밀지도 못했다.~~\n\n뛰어난 개발자들이 프론트엔드 생태계에 들어오면서 컴파일 시점에서의 최적화가 고도화 된 것 같다.\n\n카카오의 좋은 문화 중 하나가 `복잡할 수록 본질로 돌아가라`이다.\n그렇게 복잡한 웹 프론트엔드 생태계가 근본(?)을 되찾아가고 있지 않나 생각이 들었다.\n\n---\n\n**참고 자료**\n\n- [**https://so-so.dev/web/css-in-js-whats-the-defference/**](https://so-so.dev/web/css-in-js-whats-the-defference/)\n- [https://www.freecodecamp.org/news/the-tradeoffs-of-css-in-js-bee5cf926fdb/](https://www.freecodecamp.org/news/the-tradeoffs-of-css-in-js-bee5cf926fdb/)\n- [facebook 개발자가 말하는 기존 CSS의 문제 및 CSS-in-JS의 필요성 2014](https://speakerdeck.com/vjeux/react-css-in-js)\n- [https://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/](https://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/)\n- [https://velog.io/@velopert/create-your-own-design-system-with-storybook](https://velog.io/@velopert/create-your-own-design-system-with-storybook)\n- [https://brunch.co.kr/@kmongdev/17](https://brunch.co.kr/@kmongdev/17)\n- [https://darrengwon.tistory.com/1563](https://darrengwon.tistory.com/1563)\n- [https://github.com/andreipfeiffer/css-in-js/blob/main/README.md](https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#vanilla-extract)\n- [https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output](https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output)\n- [https://jbee.io/web/from-2021-to-2022/](https://jbee.io/web/from-2021-to-2022/)\n","slug":"/blog/2022/css-in-js","readingMinutes":11,"wordCount":901},"postFooterProps":{"prevPost":{"title":"M1 터미널 아키텍처 설정 (arm64, x86_64)","description":"","icon":"","image":"","tags":["infra"],"draft":false,"date":"2022-04-27","content":"\n모듈을 다운 받다가 아래 에러를 마주쳤다..\n\n```\nError: Your platform and architecture (Darwin-arm64) is unsupported.\n```\n\nIntel 프로세서 아키텍처는 x86_64 이고 Apple Silicon M1은 arm64 아키텍처를 사용한다.\n해당 모듈은 arm64 아키텍처를 지원하지 않아 발생한 에러다.\n~~M1,,, 또 너냐,,,~~\n\n---\n\n## 터미널 아키텍처 바꾸기\n\n```shell\narch -arch x86_64 /bin/zsh\n```\n\n터미널에서 아키텍처를 바꿀 수 있다.\n\n```shell\narch -arch arm64e /bin/zsh\n```\n\n계속 x86_64 아키텍처를 사용할 수도 없고 해당 커멘드를 매번 입력하기 버겁다...\n~~아무래도 x86_64환경이 더 느리다.~~\n\n---\n\n## 커멘드 alias 설정\n\n```jsx\nvi ~/.zshrc\n```\n\n빠르게 터미널 환경을 변경할 수 있도록 설정\n\n```jsx\nalias za=\"arch -arch arm64e /bin/zsh\"\nalias zx=\"arch -arch x86_64 /bin/zsh\"\n```\n\n```jsx\nsource ~/.zshrc\n```\n\n이제 터미널에 `za` `zx`만 입력해도 아키텍처를 바꿀 수 있다.\n하지만 뭔가 불편하다.. 내 터미널은 지금 어떤 아키텍처를 사용하고 있지..?\n\n---\n\n## 터미널에서 현 아키텍처 표시하기\n\n> Powerlevel10k에서 커스텀 프롬프트를 만들면 된다.\n\n```jsx\nopen ~/.p10k.zsh\n```\n\nprompt_example 찾아 밑에 아래 코드를 복사 한다.\n\n```jsx\nfunction prompt_arch() {\n  if [[ $(arch) == \"i386\" ]]; then\n   p10k segment -t '🐢'\n  fi\n}\n\nfunction instant_prompt_arch() {\n  prompt_arch\n}\n```\n\n`POWERLEVEL9K_LEFT_PROMPT_ELEMENTS`를 찾아 `arch`를 추가한다.\n\n```jsx\ntypeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(\n  # os_icon               # os identifier\n  dir                     # current directory\n  vcs                     # git status\n  prompt_char             # prompt symbol\n  **arch**\n)\n```\n\n![](https://velog.velcdn.com/images/bepyan/post/e059e686-2f8b-45ae-a78f-12970de067d3/image.png)\n\n뚜벅 뚜벅 귀엽다 🥰\n\n---\n\n**참고 자료**\n\n- [https://xo.dev/m1-terminal-environment-setup/](https://xo.dev/m1-terminal-environment-setup/)\n","slug":"/blog/2022/m1-muti-terminal-architecture","readingMinutes":2,"wordCount":212},"nextPost":{"title":"styled-components 과 emotion, 도대체 차이가 뭔가?","description":"styled-components vs emotion 💥 도대체 차이가 뭘까??","icon":"","image":"","tags":["styled-components","emotion"],"draft":false,"date":"2022-02-10","content":"\nReact에서는 보통 CSS-in-JS을 통해 스타일 작업을 진행한다.\n그중에서 styled-components, emotion이 가장 유명하고 많이 사용된다.\n\n하지만 도대체 차이가 뭘까?\n\n<br />\n<br />\n<br />\n\n### 제공하는 기능 비교\n\n---\n\n| library           | Attaching Props | Media Queries | Global Styles | Nested Selectors | Server Side Rendering | Theming Support | Composition |\n| ----------------- | --------------- | ------------- | ------------- | ---------------- | --------------------- | --------------- | ----------- |\n| styled-components | Yes             | Yes           | Yes           | Yes              | Yes                   | Yes             | Yes         |\n| emotion           | Yes             | Yes           | Yes           | Yes              | Yes                   | Yes             | Yes         |\n\n- 전반적인 스타일 기능은 똑같다.\n- 둘다 sass문법을 사용하기에 스타일 문법에도 차이가 없다.\n- [참고](https://github.com/jsjoeio/styled-components-vs-emotion)\n\n<br />\n<br />\n<br />\n<br />\n\n### 사용 트랜드\n\n---\n\n![](https://images.velog.io/images/bepyan/post/3d77564b-92a7-46c3-843c-325af34ef765/image.png)\n\n![](https://images.velog.io/images/bepyan/post/ce8b2326-f3a4-4834-935f-affb3e194a2b/image.png)\n\n- styled-componets가 더 많이 사용되고 있으나 npm 다운로드 횟수를 보면 emotion이 더 많다.\n- 근래 emotion의 만족도가 떨어지고 있다.\n- [https://2021.stateofcss.com/en-US/technologies/css-in-js/](https://2021.stateofcss.com/en-US/technologies/css-in-js/)\n- [https://www.npmtrends.com/@emotion/core-vs-styled-components](https://www.npmtrends.com/@emotion/core-vs-styled-components)\n\n<br />\n<br />\n<br />\n<br />\n\n### 용량? 성능?\n\n---\n\n블로그, 사이트들을 참고하면 대게 emotion이 styled-components보다 조금 가볍고 빠르다고 한다.\n\n먼저 https://bundlephobia.com/ 를 참고해서 최신 라이브러리 번들 사이즈를 살펴보자.\n\n![](https://images.velog.io/images/bepyan/post/a702e482-5850-48af-aea8-dd37522a4bd2/image.png)\n\n![](https://images.velog.io/images/bepyan/post/2cbaf6aa-3e4c-4fc9-8495-91eb3ebfc807/image.png)\n\n![](https://images.velog.io/images/bepyan/post/7b926716-1280-4530-a272-bda929c9c518/image.png)\n\n보통 emotion을 사용한다면 위 두가지 라이브러리를 모두 사용한다.\nemotion 패키지 차이는 [여기](https://emotion.sh/docs/package-summary) 참고.\n\n눈대중으로 보면 라이브러리 용량이 비슷해보인다. (1~2 kb 차이)\n다만 `@emotion/react`만 사용한다면 용량이 1.5배 정도 차이가 난다.\n\n<br />\n<br />\n\n그렇다면 속도 차이는 어떨까?\n\n다양한 자료를 참고해보면 emotion이 근소하게 더 빠르다.\n[참고 1](https://stitches.dev/docs/benchmarks), [참고 2](https://dev.to/meetdave3/styled-components-vs-emotion-js-a-performance-perspective-4eia), [참고 3](https://github.com/A-gambit/CSS-IN-JS-Benchmarks/blob/master/RESULT.md)\n\n하지만 [2020 styled-component v5](https://styled-components.com/releases#v5.0.0) ?\n[여기](https://medium.com/styled-components/announcing-styled-components-v5-beast-mode-389747abd987) 참고에 따르면 styled-components가 조금 더 빠르다고 한다.\n\n**결론. 성능상 둘은 유의미하게 차이가 나지 않는다.**\nemotion의 퍼포먼스가 전반적으로 더 좋게 나오고 있고 라이브러리 버전에 따라서 차이가 발생할 수 있다.\n\n<br />\n<br />\n<br />\n<br />\n\n### emotion의 차별점\n\n---\n\n[**css props**](https://emotion.sh/docs/css-prop) 기능\n\n- 인라인 스타일을 작성하지만 클래스가 되는 매직 ✨\n\n```html\n<div style={{color: \"red\"}}/>\n```\n\n기존 style 속성은 HTML 인라인 스타일로 주입이 된다.\n스타일 우선순위를 다루기 어렵고 스타일 재활용도 힘들다.\n\n```html\n<div css={{color: \"red\"}} /> {/* 혹은 */}\n<div css=\"{css`color:\" red`} />\n```\n\nemotion jsx에서 제공해주는 css 속성을 활용하면 이를 클래스로 변환해준다.\n기존 인라인으로 사용할 수 없었던 media query, pseudo selector, nested selector 등을 사용할 수 있다.\n\n<br />\n- [css props를 결합](https://velog.io/@velopert/create-your-own-design-system-with-storybook#%EB%B2%84%ED%8A%BC%EC%9D%98-theme-%EB%A7%8C%EB%93%A4%EA%B8%B0)하여 복잡한 스타일링을 진행할 수 있다.\n  ```js\n  <div css={[style, themes[theme], sizes[size]]} />\n    \n  const themes = {\n    primary: css`\n      color: red;\n    `,  \n    secondary: css`\n      color: blue;\n    `\n  }\n  const sizes = {\n    small: css`\n      fontSize: 0.75rem;\n    `,\n    medium: css`\n      fontSize: 1rem;\n    `\n  }\n  ```\n  위와 같이 css 변수를 조립하여 컴포넌트 스타일링을 진행할 수 있다.\n  ```ts\n  type ThemeType = keyof typeof themes;\n  type SizeType = keyof typeof size;\n  ```\n  typescript로 자동 타입지정까지 할 수 있는 이점이 있다.\n  \n  css override는 덤\n\n<br />\n<br />\n\n**SSR**\n\n- SSR에서 [별도의 설정 없이](https://emotion.sh/docs/ssr#gatsby-focus-wrapper) 동작이 된다.\n- 반면 styled-components 같은 경우 [ServerStyleSheet](https://styled-components.com/docs/advanced#streaming-rendering)을 설정 해야 한다.\n\n<br />\n<br />\n\n개인적으로 생각하는 단점\n\n- 파일마다 `/** @jsx jsx */` 라는 [JSX Pragma](https://emotion.sh/docs/css-prop#jsx-pragma)를 작성해야하는데 이를 설정하기 귀찮다.\n- 이는 React의 jsx와 똑같은 원리이다.\n  `import React from \"react\"`을 해줘야 컴파일이 된다.\n  ![](https://images.velog.io/images/bepyan/post/4214bfb7-8caa-4086-a4c3-48e98aaf408f/image.png)\n  emotion의 jsx로 변환되어야 emotion의 css props 문법을 사용할 수 있다.\n  `<img src=\"avatar.png\" />` → `jsx('img', { src: 'avatar.png' })`\n  <br />\nreact처럼 webpack단에서 이를 자동으로 주입시킬 수 있지만 역시 설정하기 귀찮다...\n개인적으론 storybook 웹팩 설정에서 꽤나 골머리 아팠다...\n\n<br />\n<br />\n<br />\n<br />\n\n### 결론\n\n---\n\n- 유의미한 성능차이가 있는 것이 아니다. 라이브러리 버전에 따라 달라질 수 있다.\n\n- 개발팀에서 더 익숙한 것을 사용하면 될 것 같다.\n\n- emotion의 css props로 css를 더 활용도 높게 조립할 수 있다. 하지만 안쓰면 그만이다.\n\n- SSR에서는 emotion 세팅시 더 간편하다.\n\n<br />\n<br />\n\n참고\n\nhttps://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/\nhttps://github.com/andreipfeiffer/css-in-js/blob/main/README.md#styled-components\nhttps://brunch.co.kr/@kmongdev/17\n","slug":"/blog/2022/styled-components-vs-emotion","readingMinutes":6,"wordCount":592}},"serize":null,"slug":"/blog/2022/css-in-js","compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    br: \"br\",\n    hr: \"hr\",\n    img: \"img\",\n    code: \"code\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    div: \"div\",\n    pre: \"pre\",\n    button: \"button\",\n    svg: \"svg\",\n    path: \"path\",\n    del: \"del\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"들어가면서\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#들어가면서\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"들어가면서\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"이-글의-목적\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#이-글의-목적\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"이 글의 목적\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"다양한 CSS-in-JS 라이브러리가 있는데 이들은 어떤 차이점이 있을까?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"더 나아가 어떤 상황에서 어떤 라이브러리를 사용하면 좋을까?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.h4, {\n      id: \"css-in-js가-대세인-이유\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#css-in-js가-대세인-이유\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"CSS-in-JS가 대세인 이유\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"중복되지 않는 class 이름을 고려할 필요가 없다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"JS 코드와 CSS가 상태 값을 공유할 수 있다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"컴포넌트와 스타일 코드를 쉽게 오갈 수 있다.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"자동으로 \", _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"vendor-prefix\"\n        }), \"을 붙여준다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"⇒ \", _jsx(_components.strong, {\n        children: \"개발 친화적 🌻  DX ( Developer Experience )\"\n      })]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"2020, 2021에 들어서서 많은 CSS-in-JS 라이브러리가 등장했다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://2021.stateofcss.com/en-US/technologies/css-in-js\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://2021.stateofcss.com/en-US/technologies/css-in-js\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://risingstars.js.org/2021/en#section-css-in-js\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://risingstars.js.org/2021/en#section-css-in-js\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"css-in-js의 동작 방식은 크게 \", _jsx(_components.strong, {\n        children: \"runtime\"\n      }), \", \", _jsx(_components.strong, {\n        children: \"zero-runtime\"\n      }), \" 으로 나눠진다.\", _jsx(_components.br, {}), \"\\n\", \"runtime이 반드시 성능저하를 발생시키진 않고 프로젝트 규모와 상황에 따라 달라질 수 있음을 염두하고 살펴보도록 하자.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"runtime\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#runtime\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.strong, {\n        children: \"runtime\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"javascript runtime에서 필요한 CSS를 동적으로 만들어 적용한다.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"대표적으로 잘 알려진 \", _jsx(_components.a, {\n        href: \"https://styled-components.com/\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"styled-component\"\n      }), \", \", _jsx(_components.a, {\n        href: \"https://emotion.sh/docs/introduction\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"emotion\"\n      }), \" 이 있다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"아래 styled-components로 만든 예시를 살펴보자.\", _jsx(_components.br, {}), \"\\n\", \"버튼의 상태가 바뀌면서 style 코드가 동적으로 생성되어 삽입되는 것을 볼 수 있다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/7d5ee0a5-d698-4615-a592-15847466cacb/%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB-%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%E1%86%A8-2022-01-25-%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB-12.42.01%20(1).gif\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"개발모드에서는 \", _jsx(_components.code, {\n            children: \"<style>\"\n          }), \" 태그에 style을 추가하는 방식을 사용한다.\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"디버깅에 이점이 있다고 한다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"배포 모드에서는 stylesSheet을 \", _jsx(_components.a, {\n            href: \"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"CSSStylesSheet.insertRule\"\n          }), \" 통해 바로\", _jsx(_components.a, {\n            href: \"https://dkmqflx.github.io/frontend/2020/09/14/jscssom/\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"CSSOM\"\n          }), \"에 주입한다.\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"성능상의 이짐이 있다고 한다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"css-loader가 필요 없다.\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"css파일을 생성하지 않기에 webpack에서 css-loader가 필요 없다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.h4, {\n      id: \"런타임-오버헤드가-발생할-수-있다\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#런타임-오버헤드가-발생할-수-있다\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"런타임 오버헤드가 발생할 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"런타임에서 동적으로 스타일을 생성하기에 스타일이 수시로 변경된다면...\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ex) 스크롤, 드래그 앤 드랍 관련 복잡한 에니메이션\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"./styled-components-vs-emotion\",\n        children: _jsx(_components.strong, {\n          children: \"styled-components 과 emotion의 차이를 알고 싶다면?\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"zero-runtime\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#zero-runtime\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.strong, {\n        children: \"zero-runtime\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"런타임에 css를 생성하지않으면서 \", _jsx(_components.strong, {\n        children: \"페이지를 더 빨리 로드할 수 있다.\"\n      }), _jsx(_components.br, {}), \"\\n\", \"JS 번들에서 styles코드를 모두 실행되어야 페이지가 로드된다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/a45cf494-a87a-4b4d-97d0-bbc857c36d0d/image.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"runtime에서 스타일이 생성되지 않는다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"props 변화에 따른 동적인 스타일은 css 변수를 통해 적용한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"빌드 타임에 css를 생성해야기에 webpack 설정을 해야 한다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"React CRA을 사용한다면 eject해서 webpack 설정해야 하는데 굉장히 번거롭다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"runtime에서 css polyfill를 사용할 수 없어 브라우저 버전 이슈가 있을 수 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"첫 load는 빠르지만, 첫 paint는 느릴 수 있다.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/2f0e8b75-f2f9-43b0-93af-671bdeef3cb3/image.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"css styles까지 모두 로드가 되어야 첫 paint를 시작된다.\", _jsx(_components.br, {}), \"\\n\", \"반면 runtime에서는 style를 로드하면서 첫 paint를 시작할 수 있다. ( 로딩화면 )\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"대표적인 라이브러리\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://linaria.dev/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"linaria\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"styled-component 문법 그대로 사용해서 러닝커브가 없을 것 같다.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.a, {\n              href: \"https://pustelto.com/blog/css-vs-css-in-js-perf/\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"styled-components와 속도 비교\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"mini-css-extract-plugin에 의해 critical css를 판단할 수 없는 경우 linaria의 collect를 사용가능하다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://vanilla-extract.style/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"vanilla-extract\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"사실상 typescript로 css를 작성하는 라이브러리. (\", _jsx(_components.code, {\n              children: \".css.ts\"\n            }), \")\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.a, {\n              href: \"https://github.com/css-modules/css-modules\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"css-module\"\n            }), \"와 거의 흡사하다.\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"tagged template literals를 지원하지 않는다.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"현재 굉장히 높은 만족도와 관심을 받고 있다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"critical-css\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#critical-css\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"critical CSS\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"초기 화면에서 필요한 CSS이다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"critical CSS 추출과 runtime CSS 생성은 trade-off 관계를 갖고 있다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"SSR에서 중요한 쟁점이다. 사전에 CSS 추출을 할 것인가?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"near-zero-runtime-stitches\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#near-zero-runtime-stitches\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.strong, {\n        children: \"near-zero-runtime\"\n      }), \" (stitches)\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://stitches.dev/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: _jsx(_components.strong, {\n            children: \"stitches\"\n          })\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"SSR 환경에서도 잘 동작이 되도록 세팅이 되었다.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"runtime overhead와 zero-runtime의 제약을 해결 ⇒ 빠르다\"\n          }), \" > \", _jsx(_components.a, {\n            href: \"https://stitches.dev/docs/benchmarks\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"benchmarks\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"런타임에서 각각의 CSS 프로퍼티가 Atomic CSS처럼 적용된다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"반복되는 style을 atomics class로 변환하여 class를 재사용한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"불필요한 런타임에서의 props interpolations를 줄인다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rehype-code-wrap\",\n      children: [_jsx(_components.pre, {\n        className: \"language-jsx\",\n        children: _jsxs(_components.code, {\n          className: \"language-jsx code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"const\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"StitchesButton1\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token function\",\n              children: \"styled\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"(\"\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'button'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"color\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'red'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"fontSize\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token number\",\n              children: \"24\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \")\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \";\"\n            }), \"\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"const\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"StitchesButton2\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token function\",\n              children: \"styled\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"(\"\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'button'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"color\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'red'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"fontSize\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token number\",\n              children: \"24\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \")\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \";\"\n            }), \"\\n\"]\n          })]\n        })\n      }), _jsxs(_components.button, {\n        className: \"rehype-code-wrap--copy\",\n        children: [_jsxs(_components.svg, {\n          className: \"rehype-code-wrap--copy-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: [_jsx(_components.path, {\n            d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n          }), _jsx(_components.path, {\n            d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n          })]\n        }), _jsx(_components.svg, {\n          className: \"rehype-code-wrap--check-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: _jsx(_components.path, {\n            d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/763654d2-4d56-4ab6-9999-ab5f270611d2/image.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 style 순서가 바뀌면 재사용할 수 없다.\"\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rehype-code-wrap\",\n      children: [_jsx(_components.pre, {\n        className: \"language-jsx\",\n        children: _jsxs(_components.code, {\n          className: \"language-jsx code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"const\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"StitchesButton2\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token function\",\n              children: \"styled\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"(\"\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'button'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"fontSize\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token number\",\n              children: \"24\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"color\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'red'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \")\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \";\"\n            }), \"\\n\"]\n          })]\n        })\n      }), _jsxs(_components.button, {\n        className: \"rehype-code-wrap--copy\",\n        children: [_jsxs(_components.svg, {\n          className: \"rehype-code-wrap--copy-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: [_jsx(_components.path, {\n            d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n          }), _jsx(_components.path, {\n            d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n          })]\n        }), _jsx(_components.svg, {\n          className: \"rehype-code-wrap--check-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: _jsx(_components.path, {\n            d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/mui-org/material-ui/issues/22342#issuecomment-679468200\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"참고\"\n      })\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"emotion과 같이 \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"CSSStylesSheet.insertRule\"\n      }), \" 을 사용하여 \", _jsx(_components.a, {\n        href: \"https://dkmqflx.github.io/frontend/2020/09/14/jscssom/\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"CSSOM\"\n      }), \"에 직접 삽입한다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"사전에 정의한 \", _jsx(_components.a, {\n        href: \"https://stitches.dev/docs/variants\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"variants\"\n      }), \"에 의해서 runtime 스타일링이 진행된다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"공식문서가 굉장히 친절하고 친절하게 되어 있어서\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"최고의 개발경험 제공\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"사전에 정의한 \", _jsx(_components.a, {\n          href: \"https://stitches.dev/docs/tokens\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"테마 변수\"\n        }), \", variants 자동완성 제공\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 한계점...\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"css style extraction이 되지 않는다.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"tagged template literals를 지원하지 않는다.\", _jsx(_components.br, {}), \"\\n\", \"Object syntax을 사용하는 이유는 keep the bundle size to a minimum이라고 한다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"atomic-css\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#atomic-css\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Atomic CSS\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"필요한 수치를 입력을 해두면 필요한 CSS를 자동으로 생성을 해두는 주문형(on-demand) 패러다임\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"대표적인 라이브러리는 \", _jsx(_components.a, {\n          href: \"https://tailwindcss.com/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"tailwindcss\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"중복된 style 코드를 atomic한 클래스로 묶음으로 style sheet 사이즈를 줄인다.\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.a, {\n              href: \"https://engineering.fb.com/2020/05/08/web/facebook-redesign/\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"Facebook에서 Atomic CSS 도입으로 style sheet사이즈를 80% 줄인 사례\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"맺으면서\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#맺으면서\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"맺으면서\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"css-in-js-사용에-고려할-사항\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#css-in-js-사용에-고려할-사항\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"CSS-in-JS 사용에 고려할 사항\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"runtime overhead가 발생할 될 서비스인가?\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"없다면 기존 runtime CSS-in-JS를 써도 전혀 문제가 없을 것이다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"직접 스타일을 작성하는가? 아니면 CSS 소스를 사용하는가?\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"tagged template literals를 지원하지 않는다면 CSS 소스를 옮기기 굉장히 불편할 것이다.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"따라서 stitches와 vanilla-extract의 도입은 CSS 변환의 수고스러움을 감수해야 할 것이다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"SSR인가 CSR인가?\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"SSR를 설정하기 불편한 것이 있고 Critical CSS 최적화된 것이 있다.\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"CSR는 runtime stylesheets, SSR는 static CSS에 이점을 갖는다. \", _jsx(_components.a, {\n              href: \"https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output#to-conclude\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"참고\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"멋진 개발팀들에서는 어떻게 라이브러리를 선택하는지 살펴보면 큰 도움이 될 것이다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/mui-org/material-ui/issues/22342\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"material-ul가 emotion을 선택한 이유\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/Shopify/foundational-design-system-proto/discussions/44#discussioncomment-888380\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"shopify가 vanilla-extract를 선택한 이유\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"개인적으로 생각했을 땐 결국 \", _jsx(_components.code, {\n        children: \"개발 친화적 🌻\"\n      }), \"이 제일 중요한 이슈인 것 같다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"개발팀에서 편하게 디자인 시스템을 구축할 수 있는가?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"개발 리소스 비용이 크기 때문...\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"프론트엔드의-흐름-build-time\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#프론트엔드의-흐름-build-time\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"프론트엔드의 흐름, build-time?\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현대 프론트엔드의 작업흐름이 build-time에서 최적화가 이뤄지고 있다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"최신 CSS-in-JS 라이브러리들이 \", _jsx(_components.strong, {\n          children: \"build-time\"\n        }), \"(zero-runtime)으로 개발되고 있다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"TypeScript\"\n        }), \"를 통해서 build-time 및 run-time 이전에 type 체크, code IntelliSense를 제공해준다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"webpack, babel\"\n        }), \"를 통해서 다양한 브라우저에서 동작하는 앱을 만든다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Next.js가 각광을 받으면서 CSR에서 \", _jsx(_components.strong, {\n          children: \"SSR\"\n        }), \"로 웹이 개발되어 가고 있다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"React, Vue를 넘어서 현재 \", _jsx(_components.strong, {\n          children: \"Svelte\"\n        }), \"가 많은 사람들의 주목을 받고 있다.\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"run-time에서 Virtual DOM를 통해 비교하여 변경사항을 반영하는 것이 아닌,\", _jsx(_components.br, {}), \"\\n\", \"build-time에서 어느 부분이 변경될지 파악하고 DOM을 업데이트하는 효율적인 명령 코드로 변환하여 사용한다.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"javascript → typescript → build-time → compiler → \", _jsx(_components.strong, {\n        children: \"c++\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://c.tenor.com/pl54bxCr1x8AAAAM/wow-omg.gif\",\n        alt: \"https://c.tenor.com/pl54bxCr1x8AAAAM/wow-omg.gif\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"대학교 1학년 때부터 세뇌받듯이 들었던 말이 \", _jsx(_components.code, {\n        children: \"프로그래밍 언어의 근본은 C++\"\n      }), \" 이다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.del, {\n        children: \"javascript, python 같은 스크립트 언어는 감히 고개를 내밀지도 못했다.\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"뛰어난 개발자들이 프론트엔드 생태계에 들어오면서 컴파일 시점에서의 최적화가 고도화 된 것 같다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"카카오의 좋은 문화 중 하나가 \", _jsx(_components.code, {\n        children: \"복잡할 수록 본질로 돌아가라\"\n      }), \"이다.\", _jsx(_components.br, {}), \"\\n\", \"그렇게 복잡한 웹 프론트엔드 생태계가 근본(?)을 되찾아가고 있지 않나 생각이 들었다.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"참고 자료\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://so-so.dev/web/css-in-js-whats-the-defference/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: _jsx(_components.strong, {\n            children: \"https://so-so.dev/web/css-in-js-whats-the-defference/\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.freecodecamp.org/news/the-tradeoffs-of-css-in-js-bee5cf926fdb/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://www.freecodecamp.org/news/the-tradeoffs-of-css-in-js-bee5cf926fdb/\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://speakerdeck.com/vjeux/react-css-in-js\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"facebook 개발자가 말하는 기존 CSS의 문제 및 CSS-in-JS의 필요성 2014\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://velog.io/@velopert/create-your-own-design-system-with-storybook\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://velog.io/@velopert/create-your-own-design-system-with-storybook\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://brunch.co.kr/@kmongdev/17\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://brunch.co.kr/@kmongdev/17\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://darrengwon.tistory.com/1563\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://darrengwon.tistory.com/1563\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#vanilla-extract\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://github.com/andreipfeiffer/css-in-js/blob/main/README.md\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://jbee.io/web/from-2021-to-2022/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://jbee.io/web/from-2021-to-2022/\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tableOfContents":[{"slug":"들어가면서","text":"들어가면서","subSections":[]},{"slug":"runtime","text":"runtime","subSections":[]},{"slug":"zero-runtime","text":"zero-runtime","subSections":[{"slug":"critical-css","text":"critical CSS"}]},{"slug":"near-zero-runtime-stitches","text":"near-zero-runtime (stitches)","subSections":[{"slug":"atomic-css","text":"Atomic CSS"}]},{"slug":"맺으면서","text":"맺으면서","subSections":[{"slug":"css-in-js-사용에-고려할-사항","text":"CSS-in-JS 사용에 고려할 사항"},{"slug":"프론트엔드의-흐름-build-time","text":"프론트엔드의 흐름, build-time?"}]}]},"__N_SSG":true}