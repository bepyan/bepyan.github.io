{"pageProps":{"post":{"title":"Github Action에서 Error: Cannot find module 에러 해결","description":"at Function.Module._resolveFilename (node:internal/modules/cjs/loader:985:15)","icon":"","image":"","tags":["troubleshooting","git","github-action"],"draft":false,"date":"2022-12-22","content":"\n로컬에서는 문제가 없는데 github action에서만 에러가 발생될 떄가 있다.\n\n```\nError: Cannot find module './siteMap.config.ts'\nRequire stack:\n- /home/runner/work/bepyan.github.io/bepyan.github.io/imaginaryUncacheableRequireResolveScript\n    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:985:15)\n```\n\n---\n\n## 원인\n\n파일의 **대소문자**(case sensitive)가 문제이다!\n\n리눅스는 case sensitive하고 윈도우와 맥은 case sensitive하지 못한다.\n다른 말로 리눅스에선 `File.txt`과 `file.txt`이 다른 파일이고 윈도우와 맥에선 같은 파일이다.\n\ngit action은 리눅스 환경(`ubuntu-latest`)이기에 대소문자가 구분되어 파일을 찾을 수 없게 된다.\n\n---\n\n## 해결 방법\n\n**파일명 대소문자를 알맞게 수정해주자.**\n\n여기서 골치 아픈 것이 하나 있다.\ngit이 파일명의 대소문자를 구별할 수 없어 파일명 수정 후 제대로 커밋을 할 수 없다는 것이다.\n이 땐 `git mv` 명령어를 활용하면 된다.\n\n```shell\ngit mv as-is to-be\ngit mv siteMap.config.ts sitemap.config.ts\n```\n","slug":"/blog/2022/cannot-find-module-in-github-action","readingMinutes":2,"wordCount":108},"postFooterProps":{"prevPost":{"title":"Next.js mdx plugin","description":"`next-mdx-remote`에서 플로그인으로 이쁜 결과물을 만들자.","tags":["Next.js","Blog"],"draft":false,"date":"2022-12-27","content":"\n## 기본 사용법\n\n✨ [**next-mdx-remote**](https://github.com/hashicorp/next-mdx-remote)를 활용하여 markdown파일을 이쁜 HTML 코드로 변환해줍니다.  \n추가로 markdown 파일에서 React 컴포넌트를 사용할 수 있는 이점이 있습니다.\n\n```shell\nyarn add next-mdx-remote\n```\n\n<br />\n\n1. mdx 파일을 `serialize`하여 필요한 데이터를 추출하고 가공합니다.\n\n```ts:libs/mdx.ts\nimport { serialize } from 'next-mdx-remote/serialize';\n\nexport const serializeMdx = (source: string) => {\n  return serialize(source, {\n    mdxOptions: {\n      remarkPlugins: [],\n      rehypePlugins: [],\n      format: 'mdx',\n    },\n  });\n};\n```\n\n- [`remark plugins`](https://github.com/remarkjs/remark/blob/main/doc/plugins.md)과 [`rehype plugins`](https://github.com/rehypejs/rehype/blob/main/doc/plugins.md)를 활용해서 다양한 기능을 추가할 수 있습니다.\n\n<br />\n\n2. `getStaticProps`(빌드시점)에서 필요한 데이터를 모두 가공합니다.\n\n```ts:[...slugs].tsx {21}\nimport { GetStaticPaths, GetStaticProps } from 'next';\nimport { serializeMdx } from '~/libs/mdx';\nimport { getAllPosts } from '~/libs/post';\n\nexport const getStaticPaths: GetStaticPaths = () => {\n  const posts = getAllPosts();\n\n  return {\n    paths: posts.map((post) => `/blog/${post.slug}`),\n    fallback: 'blocking',\n  };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const { slugs } = params as { slugs: string[] };\n\n  const slug = [...slugs].join('/');\n  const post = getAllPosts().find((v) => v.slug === slug);\n  //...\n\n  const mdx = await serializeMdx(post.content);\n\n  return {\n    props: { mdx },\n  };\n};\n```\n\n<br />\n\n3. 브라우저는 `<MDXRemote />`가 마운트되면서 데이터를 HTML로 변환합니다.\n\n```tsx\nexport default function PostPage({ mdx }: { mdx: MDXRemoteSerializeResult }) {\n  return (\n    <div className=\"prose dark:prose-dark mt-4 w-full max-w-none\">\n      <MDXRemote {...mdx} />\n    </div>\n  );\n}\n```\n\n---\n\n## 기본 스타일링\n\n### @tailwindcss/typography\n\nhttps://tailwindcss.com/docs/typography-plugin\n\ntailwind 기반으로 mdx 마크업을 스타일링하는데 기본 설정만 사용해도 충분히 이쁩니다!\n\n```js:tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  variants: {\n    typography: ['dark'],\n  },\n  plugins: [require('@tailwindcss/typography')],\n}\n```\n\n마크다운 컴포넌트 상위에 `prose`를 꼭 씌워줘야하는 것을 잊지 않길 바랍니다!\n\n```tsx\n<div className=\"prose dark:prose-dark\">\n  <MDXRemote {...mdx} />\n</div>\n```\n\n`tailwind.config.js`에서 [커스터마이징](https://tailwindcss.com/docs/typography-plugin#customizing-the-css)을 할수도 있고 `globals.css`에서도 스타일을 정의 할 수 있습니다.  \n관심사에 따라 css 코드들을 분리하면 좋은 것 같습니다.\n\n```css:globals.css\n/* ... */\n@import url(./code.css);\n@import url(./prose.css);\n/* ... */\n```\n\n```css:prose.css\n.prose a {\n  @apply transition-all;\n}\n```\n\n---\n\n## 필수 플러그인\n\n변환 도구들은 모두 `server-side`에서 실행 될 것이기에 모두 `devDependency`로 설치해줍니다.\n\n```shell\nyarn add -D remark-gfm rehype-prism-plus rehype-slug rehype-autolink-headings\nyarn add -D @tailwindcss/typography\n```\n\n---\n\n### remark-gfm\n\nhttps://github.com/remarkjs/remark-gfm\n\n`GFM`(autolink literals, footnotes, strikethrough, tables, tasklists...) 문법들을 해석해주는 도구 입니다.\n굉장히 기본적인 마크다운 문법을 HTML로 변환해주기에 필수로 사용해야 합니다.\n\n---\n\n### rehype-prism-plus\n\nhttps://github.com/timlrx/rehype-prism-plus\n\n[**prism**](https://prismjs.com/) 기반으로 코드블럭을 `syntax highlighting`해주는 도구 입니다.  \nhighlighting, showLineNumbers, line inserted, line deleted 등 강력크한 기능을 제공해줍니다.\n\n```diff-js {1} showLineNumbers\nfunction fancyAlert(arg) {\n  if (arg) {\n+    $.facebox({ div: '#foo' })\n-    alert('#roo')\n  }\n}\n```\n\n하지만 코드 토큰만 해석해줄 뿐이지 스타일은 직접 씌워줘야합니다.  \nprism기반의 [**다양한 테마**](https://github.com/PrismJS/prism-themes)를 적용할 수 있으니 취향 것 선택하면 됩니다.  \n추가적으로 [**dracular**](https://draculatheme.com/prism) [**intellij**](https://github.com/bulenkov/Darcula) 테마를 추천드립니다.\n\n자세한 설정은 [제 레포지토리](https://github.com/bepyan/bepyan.github.io/blob/main/src/styles/intellij-prism.css)를 참고해주시면 될 것 같습니다. ~~생각보다 복잡합니다...~~\nvscode와 완벽히 똑같이 스타일링 되지 않는 점은 감안하셔야 합니다.\n\n---\n\n### rehype-slug, rehype-autolink-headings\n\n[rehype-slug](https://github.com/rehypejs/rehype-slug)를 사용하여 headings에 id를 심어주면,  \n[rehype-autolink-headings](https://github.com/rehypejs/rehype-autolink-headings)가 id를 통해서 anchor를 생성해줍니다.  \n이를 활용하여 제목들로 바로가는 링크가 활성화되며 다양하게 응용될 수 있습니다.\n\n참고로 이전에 많이 사용되었던 [remark-slug](https://github.com/remarkjs/remark-slug)는 deprecated 되었습니다.\n\nHeadings Link의 className를 아래와 같이 커스텀하게 지정할 수 있습니다.\n\n```ts:libs/mdx.ts\nimport { serialize } from 'next-mdx-remote/serialize';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\n\nexport const serializeMdx = (source: string) => {\n  return serialize(source, {\n    //...\n    mdxOptions: {\n      //...\n      rehypePlugins: [\n        [\n          rehypeAutolinkHeadings,\n          {\n            properties: {\n              className: ['anchor'],\n            },\n          },\n        ],\n      ],\n    },\n  });\n};\n```\n\n기본적으로 css의 `content`를 활용해서 `anchor`를 만들 수 있습니다.\n\n```css {11}\n.prose .anchor {\n  @apply invisible absolute no-underline;\n\n  margin-left: -1em;\n  padding-right: 0.5em;\n  cursor: pointer;\n}\n\n.prose .anchor:after {\n  @apply text-gray-300 dark:text-gray-700;\n  content: '#';\n}\n\n.anchor:hover,\n.prose *:hover > .anchor {\n  @apply visible;\n}\n```\n\n적당히 스크롤되도록 `scroll-margin-top`을 추가해주면 금상첨화입니다.\n\n```js:tailwind.config.js\nconst { spacing } = require('tailwindcss/defaultTheme');\n\nmodule.exports = {\n  //...\n  theme: {\n    extend: {\n      typography: (theme) => ({\n        DEFAULT: {\n          css: {\n            //...\n            'h1,h2,h3,h4': {\n              'scroll-margin-top': spacing[32],\n            },\n          }\n        }\n      })\n    }\n  }\n}\n```\n\n### remark-breaks\n\nhttps://github.com/remarkjs/remark-breaks\n\n기존 마크다운 문법에서는 문장 끝에 ` ` 2개 이상 입력해야 줄바꿈이 되는데 개인적으로 꽤나 불편했습니다.\n해당 플러그인을 사용하면 마크다운에서 작성한대로 줄바꿈이 적용됩니다.\n\n---\n\n## 추천 플로그인\n\n필요에 따라 활용도가 높은 플러그인들입니다. ~~어쩌면 필수~~\n\n---\n\n### remark-math, rehype-katex\n\n```shell\nyarn add -D remark-math rehype-katex\n```\n\n[remark-math](https://github.com/remarkjs/remark-math)과 [rehype-katex](https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex)를 활용하여 mdx에서 수학 수식을 사용할 수 있습니다.\n\n---\n\n### rehype-code-titles\n\nhttps://github.com/josestg/rehype-code-title\n\n코드블럭 제목을 생성해주는 도구입니다.\n\n`확장자:파일명`처럼 사용하면 됩니다. &nbsp; ex. `tsx:pages/_app.tsx`\n\nmdx에서 작성한 것이 아래와 같이 파싱됩니다.\n\n```html\n<div class=\"rehype-code-title\">code.css</div>\n<pre class=\"language-css\">\n  <code class=\"language-css code-highlight\">\n    <span class=\"code-line\">\n      <!-- ... -->\n    </span>\n  </code>\n</pre>\n```\n\n스타일은 역시 직접 작성해줘야 합니다.\n\n```css:code.css\n.prose .rehype-code-title {\n  /* ... */\n  @apply rounded-t-lg border border-b-0 px-5 py-3 text-sm font-bold;\n}\n```\n\n---\n\n### remark-toc\n\nhttps://github.com/remarkjs/remark-toc\n\n`Tabel of Content`를 만들어 주는 도구 입니다.\n\n보통 최상단에 `## TOC` 혹은 `## Table of contents`를 작성해주면 됩니다.\n\n<br />\n<br />\n\n---\n\n## 최종 코드\n\n```ts:libs/mdx.ts\nimport { serialize } from 'next-mdx-remote/serialize';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeCodeTitles from 'rehype-code-titles';\nimport rehypePrism from 'rehype-prism-plus';\nimport rehypeSlug from 'rehype-slug';\nimport remarkGfm from 'remark-gfm';\nimport remarkToc from 'remark-toc';\n\nexport const serializeMdx = (source: string) => {\n  return serialize(source, {\n    parseFrontmatter: true,\n    mdxOptions: {\n      remarkPlugins: [remarkToc, remarkGfm],\n      rehypePlugins: [\n        rehypeSlug,\n        rehypeCodeTitles,\n        rehypePrism,\n        [\n          rehypeAutolinkHeadings,\n          {\n            properties: {\n              className: ['anchor'],\n            },\n          },\n        ],\n      ],\n      format: 'mdx',\n    },\n  });\n};\n```\n\n### 참고\n\nhttps://yceffort.kr/2020/10/migrate-gatsby-from-nextjs  \nhttps://colinhemphill.com/blog/fast-static-syntax-highlighting-for-mdx-in-nextjs\n\nProject Level Snippets  \nhttps://code.visualstudio.com/updates/v1_28#_project-level-snippets\n","slug":"/blog/nextjs-blog/4-mdx-plugin","readingMinutes":8,"wordCount":831,"serizeSlug":"nextjs-blog"},"nextPost":{"title":"Next.js에 구글 애드센스 적용하기","description":"수익성 이해하기\n\n수익은 월별 페이지 조회수 50,000부터 시작합니다.\n따라서 그 이하의 조회수는 수익이 발생되지 않겠지요 🥲\n\nGoogle 애드센스 계산기(https://www.google.com/adsense/start/cal...","tags":["Next.js","google adsense"],"draft":false,"date":"2022-12-04","content":"\n## 수익성 이해하기\n\n수익은 월별 페이지 조회수 50,000부터 시작합니다.\n따라서 그 이하의 조회수는 수익이 발생되지 않겠지요 🥲\n\n[**Google 애드센스 계산기**](https://www.google.com/adsense/start/#calculator)를 통해서 연수익을 예상할 수 있습니다.\n아시아 기준 인터넷 관련 콘텐츠에서 월별 50,000 조회수이면 1년에 6,700달러(870만원).. 즉, 월 7만원을 기대할 수 있습니다.\n흠.. 과연 월 50,000 조회수를 받을 수 있지 모르겠네요..\n\n## 구글 애드센스 시작하기\n\nhttps://www.google.com/intl/ko_kr/adsense/start/\n\n관련 정보를 기입해주고 `Next.js`에서 스크립트 파일을 삽입하면 됩니다.\n\n```tsx:_app.tsx\nimport Script from 'next/script';\n\n<Script\n    async\n    src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2820184336962070\"\n    crossOrigin=\"anonymous\"\n/>\n```\n\n`자동광고` 설정을 통해서 별도의 설정없이 광고를 추가할 수 있습니다.\n구글에서 사이트를 분석하여 알맞는 위치에 추가해주게 됩니다.\n\n별도로 광고배너를 붙이는 방법은 추후에 알아보도록 합시다.\n\n### 개인정보 보호 대비하기\n\n지금까지는 특별히 대응해야할 점은 안보이는 것 같습니다.\n\n- GDPR\n  - 유럽 경제 지역(EEA) 및 영국 사용자에게 공개하고 이에 대한 동의를 얻어야 합니다.\n- CCPA\n  - 캘리포니아 소비자 개인정보 보호법, 미국 주 개인 정보 보호법을 준수하도록 지원하는 기능입니다.\n\n## 참고\n\n- https://ko.wix.com/blog/post/what-is-google-adsense\n","slug":"/blog/2022/google-adsense","readingMinutes":2,"wordCount":144}},"serize":null,"slug":"/blog/2022/cannot-find-module-in-github-action","compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    hr: \"hr\",\n    h2: \"h2\",\n    a: \"a\",\n    strong: \"strong\",\n    br: \"br\",\n    div: \"div\",\n    button: \"button\",\n    svg: \"svg\",\n    path: \"path\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"로컬에서는 문제가 없는데 github action에서만 에러가 발생될 떄가 있다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"code-highlight\",\n        children: [_jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Error: Cannot find module './siteMap.config.ts'\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"Require stack:\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"- /home/runner/work/bepyan.github.io/bepyan.github.io/imaginaryUncacheableRequireResolveScript\\n\"\n        }), _jsx(_components.span, {\n          className: \"code-line\",\n          children: \"    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:985:15)\\n\"\n        })]\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"원인\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#원인\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"원인\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"파일의 \", _jsx(_components.strong, {\n        children: \"대소문자\"\n      }), \"(case sensitive)가 문제이다!\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"리눅스는 case sensitive하고 윈도우와 맥은 case sensitive하지 못한다.\", _jsx(_components.br, {}), \"\\n\", \"다른 말로 리눅스에선 \", _jsx(_components.code, {\n        children: \"File.txt\"\n      }), \"과 \", _jsx(_components.code, {\n        children: \"file.txt\"\n      }), \"이 다른 파일이고 윈도우와 맥에선 같은 파일이다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"git action은 리눅스 환경(\", _jsx(_components.code, {\n        children: \"ubuntu-latest\"\n      }), \")이기에 대소문자가 구분되어 파일을 찾을 수 없게 된다.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"해결-방법\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#해결-방법\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"해결 방법\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"파일명 대소문자를 알맞게 수정해주자.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"여기서 골치 아픈 것이 하나 있다.\", _jsx(_components.br, {}), \"\\n\", \"git이 파일명의 대소문자를 구별할 수 없어 파일명 수정 후 제대로 커밋을 할 수 없다는 것이다.\", _jsx(_components.br, {}), \"\\n\", \"이 땐 \", _jsx(_components.code, {\n        children: \"git mv\"\n      }), \" 명령어를 활용하면 된다.\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rehype-code-wrap\",\n      children: [_jsx(_components.pre, {\n        className: \"language-shell\",\n        children: _jsxs(_components.code, {\n          className: \"language-shell code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token function\",\n              children: \"git\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token function\",\n              children: \"mv\"\n            }), \" as-is to-be\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token function\",\n              children: \"git\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token function\",\n              children: \"mv\"\n            }), \" siteMap.config.ts sitemap.config.ts\\n\"]\n          })]\n        })\n      }), _jsxs(_components.button, {\n        className: \"rehype-code-wrap--copy\",\n        children: [_jsxs(_components.svg, {\n          className: \"rehype-code-wrap--copy-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: [_jsx(_components.path, {\n            d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n          }), _jsx(_components.path, {\n            d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n          })]\n        }), _jsx(_components.svg, {\n          className: \"rehype-code-wrap--check-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: _jsx(_components.path, {\n            d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n          })\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tableOfContents":[{"slug":"원인","text":"원인","subSections":[]},{"slug":"해결-방법","text":"해결 방법","subSections":[]}]},"__N_SSG":true}