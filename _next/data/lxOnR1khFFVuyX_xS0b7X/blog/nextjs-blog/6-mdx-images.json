{"pageProps":{"post":{"title":"Next.js 블로그 mdx에서 이미지 복붙하기 (feat. Paste Image)","description":"vscode markdown 파일에서 이미지를 기똥차게 사용해보자!","tags":["next.js","blog","markdown","Paste Image"],"draft":false,"date":"2022-11-15","content":"\nnotion, velog로 글을 작성하다가 vscode로 작성하려다보니 이미지를 추가하는 것이 꽤나 번거롭습니다. 🥲\n일일이 링크를 찾거나 생성해서 수작업으로 넣어줘야 했지요.\n앞으로 글을 그대로 수작업으로 작성해야한다고 생각하면 너무 아찔합니다!\n\n다행히 우리를 구원해줄 vscode 플러그인이 있습니다!  \nmdx에서 이미지를 복사하면 로컬환경에 정적 이미지 리소스를 생성해줍니다.\n\n✨ [**Paste Image**](https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image)  \n다만 gif는 지원되지 않습니다.\n\n## 환경 세팅하기\n\n`.vscode/settings.json` 파일을 생성합니다.  \n레포 단위의 개발환경을 세팅하기 위함입니다.\n\n```json\n{\n  \"pasteImage.defaultName\": \"YYMMDD-HHmmss\",\n  \"pasteImage.basePath\": \"${projectRoot}/public\",\n  \"pasteImage.path\": \"${projectRoot}/public/posts/${currentFileNameWithoutExt}\",\n  \"pasteImage.forceUnixStyleSeparator\": true,\n  \"pasteImage.insertPattern\": \"![${imageFileNameWithoutExt}](${imageFilePath})\",\n  \"pasteImage.prefix\": \"/\"\n}\n```\n\n경로를 mdx 파일 단위로 이미지가 저장되도록 했습니다.\n\n`/posts/nextjs-blog/2-images.mdx`  \n-> `/public/posts/2-images/[YYMMDD-HHmmss].png`\n\nposts와 1:1 매칭하고 싶지만 중간 경로를 추출할 수 있는 방법이 없는 것 같습니다 🥲\n\n## 단축키 설정\n\n저는 간편하게 복붙하기 위해서 단축키도 같이 수정을 해줬습니다.\n\n`.vscode/keybindings.json`\n\n```json\n[\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"-notebook.cell.pasteAbove\",\n    \"when\": \"notebookEditorFocused && !inputFocus\"\n  },\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"-markdown.showPreview\",\n    \"when\": \"!notebookEditorFocused && editorLangId == 'markdown'\"\n  },\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"-markdown.extension.closePreview\",\n    \"when\": \"markdownPreviewFocus\"\n  },\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"extension.pasteImage\",\n    \"when\": \"editorTextFocus\"\n  }\n]\n```\n\n이제 이미지를 복사하고 `shift + cmd + v` 입력하면 이미지가 짜잔 생성됩니다.  \n딜레이가 ~~거의~~ 없다는 사실!\n\n![copy-paste](/posts/6-mdx-images/copy-paste.gif)\n\n![221115-012522](/posts/6-mdx-images/221115-012522.png)\n","slug":"nextjs-blog/6-mdx-images","readingMinutes":2,"wordCount":173},"slug":"nextjs-blog/6-mdx-images","compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    br: \"br\",\n    a: \"a\",\n    strong: \"strong\",\n    h2: \"h2\",\n    span: \"span\",\n    code: \"code\",\n    pre: \"pre\",\n    del: \"del\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"notion, velog로 글을 작성하다가 vscode로 작성하려다보니 이미지를 추가하는 것이 꽤나 번거롭습니다. 🥲\\n일일이 링크를 찾거나 생성해서 수작업으로 넣어줘야 했지요.\\n앞으로 글을 그대로 수작업으로 작성해야한다고 생각하면 너무 아찔합니다!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"다행히 우리를 구원해줄 vscode 플러그인이 있습니다!\", _jsx(_components.br, {}), \"\\n\", \"mdx에서 이미지를 복사하면 로컬환경에 정적 이미지 리소스를 생성해줍니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"✨ \", _jsx(_components.a, {\n        href: \"https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image\",\n        children: _jsx(_components.strong, {\n          children: \"Paste Image\"\n        })\n      }), _jsx(_components.br, {}), \"\\n\", \"다만 gif는 지원되지 않습니다.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"환경-세팅하기\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#환경-세팅하기\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"환경 세팅하기\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \".vscode/settings.json\"\n      }), \" 파일을 생성합니다.\", _jsx(_components.br, {}), \"\\n\", \"레포 단위의 개발환경을 세팅하기 위함입니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.defaultName\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"YYMMDD-HHmmss\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.basePath\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"${projectRoot}/public\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.path\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"${projectRoot}/public/posts/${currentFileNameWithoutExt}\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.forceUnixStyleSeparator\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"true\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.insertPattern\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"![${imageFileNameWithoutExt}](${imageFilePath})\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.prefix\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"/\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"경로를 mdx 파일 단위로 이미지가 저장되도록 했습니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"/posts/nextjs-blog/2-images.mdx\"\n      }), _jsx(_components.br, {}), \"\\n\", \"-> \", _jsx(_components.code, {\n        children: \"/public/posts/2-images/[YYMMDD-HHmmss].png\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"posts와 1:1 매칭하고 싶지만 중간 경로를 추출할 수 있는 방법이 없는 것 같습니다 🥲\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"단축키-설정\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#단축키-설정\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"단축키 설정\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저는 간편하게 복붙하기 위해서 단축키도 같이 수정을 해줬습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \".vscode/keybindings.json\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"key\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"shift+cmd+v\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"command\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"-notebook.cell.pasteAbove\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"when\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"notebookEditorFocused && !inputFocus\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"key\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"shift+cmd+v\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"command\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"-markdown.showPreview\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"when\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"!notebookEditorFocused && editorLangId == 'markdown'\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"key\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"shift+cmd+v\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"command\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"-markdown.extension.closePreview\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"when\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"markdownPreviewFocus\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"key\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"shift+cmd+v\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"command\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"extension.pasteImage\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"when\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"editorTextFocus\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이제 이미지를 복사하고 \", _jsx(_components.code, {\n        children: \"shift + cmd + v\"\n      }), \" 입력하면 이미지가 짜잔 생성됩니다.\", _jsx(_components.br, {}), \"\\n\", \"딜레이가 \", _jsx(_components.del, {\n        children: \"거의\"\n      }), \" 없다는 사실!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/6-mdx-images/copy-paste.gif\",\n        alt: \"copy-paste\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/6-mdx-images/221115-012522.png\",\n        alt: \"221115-012522\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tableOfContents":[{"slug":"환경-세팅하기","text":"환경 세팅하기","subSections":[]},{"slug":"단축키-설정","text":"단축키 설정","subSections":[]}]},"__N_SSG":true}