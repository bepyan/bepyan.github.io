{"pageProps":{"tag":"next.js","posts":[{"title":"Next.js mdx plugin","description":"`next-mdx-remote`에서 플로그인으로 이쁜 결과물을 만들자.","tags":["next.js","blog"],"draft":false,"date":"2022-11-29","content":"\n## 기본 사용법\n\n✨ [**next-mdx-remote**](https://github.com/hashicorp/next-mdx-remote)를 활용하여 markdown파일을 이쁜 HTML 코드로 변환해줍니다.  \nmarkdown과 Custom React Component를 연결해주는 것이 특징입니다.\n\n```shell\nyarn add next-mdx-remote\n```\n\n<br />\n\n1. mdx 파일을 `serialize`하여 필요한 데이터를 추출하고 가공합니다.\n\n```ts:libs/mdx.ts\nimport { serialize } from 'next-mdx-remote/serialize';\n\nexport const serializeMdx = (source: string) => {\n  return serialize(source, {\n    mdxOptions: {\n      remarkPlugins: [],\n      rehypePlugins: [],\n      format: 'mdx',\n    },\n  });\n};\n```\n\n- [`remark plugins`](https://github.com/remarkjs/remark/blob/main/doc/plugins.md)과 [`rehype plugins`](https://github.com/rehypejs/rehype/blob/main/doc/plugins.md)를 활용해서 다양한 기능을 추가할 수 있습니다.\n\n<br />\n\n2. `getStaticProps`(빌드시점)에서 필요한 데이터를 모두 가공합니다.\n\n```ts:[...slugs].tsx {21}\nimport { GetStaticPaths, GetStaticProps } from 'next';\nimport { serializeMdx } from '~/libs/mdx';\nimport { getAllPosts } from '~/libs/post';\n\nexport const getStaticPaths: GetStaticPaths = () => {\n  const posts = getAllPosts();\n\n  return {\n    paths: posts.map((post) => `/blog/${post.slug}`),\n    fallback: 'blocking',\n  };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const { slugs } = params as { slugs: string[] };\n\n  const slug = [...slugs].join('/');\n  const post = getAllPosts().find((v) => v.slug === slug);\n  //...\n\n  const mdx = await serializeMdx(post.content);\n\n  return {\n    props: { mdx },\n  };\n};\n```\n\n<br />\n\n3. 브라우저는 `<MDXRemote />`가 마운트되면서 데이터는 HTML로 변환됩니다.\n\n```tsx\nexport default function PostPage({ mdx }: { mdx: MDXRemoteSerializeResult }) {\n  return (\n    <div className=\"prose dark:prose-dark mt-4 w-full max-w-none\">\n      <MDXRemote {...mdx} />\n    </div>\n  );\n}\n```\n\n---\n\n## 필수 플러그인\n\n변환 도구들은 모두 `server-side`에서 실행 될 것이기에 모두 `devDependency`로 설치해줍니다.\n\n```shell\nyarn add -D remark-gfm rehype-prism-plus rehype-slug rehype-autolink-headings\nyarn add -D @tailwindcss/typography\n```\n\n---\n\n### remark-gfm\n\nhttps://github.com/remarkjs/remark-gfm\n\n`GFM`(autolink literals, footnotes, strikethrough, tables, tasklists...) 문법들을 해석해주는 도구 입니다.\n\n---\n\n### rehype-prism-plus\n\nhttps://github.com/timlrx/rehype-prism-plus\n\n[**prism**](https://prismjs.com/) 기반으로 코드블럭을 `syntax highlighting`해주는 도구 입니다.  \nhighlighting, showLineNumbers, line inserted, line deleted 등 강력크한 기능을 제공해줍니다.\n\n```diff-js {1} showLineNumbers\nfunction fancyAlert(arg) {\n  if (arg) {\n+    $.facebox({ div: '#foo' })\n-    alert('#roo')\n  }\n}\n```\n\n하지만 코드 토큰만 해석해줄 뿐이지 스타일은 직접 씌워줘야합니다.  \nprism기반의 [다양한 테마](https://github.com/PrismJS/prism-themes)를 적용할 수 있으니 취향 것 선택하면 됩니다.  \n저는 [dracular](https://draculatheme.com/prism)에서 받아왔습니다.\n\n자세한 설정은 [제 레포지토리](https://github.com/bepyan/bepyan.github.io/blob/main/src/styles/code.css)를 참고해주시면 될 것 같습니다. ~~생각보다 복잡합니다...~~\n\n---\n\n### rehype-slug, rehype-autolink-headings\n\n[rehype-slug](https://github.com/rehypejs/rehype-slug)를 사용하여 headings에 id를 심어주면,  \n[rehype-autolink-headings](https://github.com/rehypejs/rehype-autolink-headings)가 id를 통해서 anchor를 생성해줍니다.  \n이를 활용하여 제목들로 바로가는 링크가 활성화되며 다양하게 응용될 수 있습니다.\n\n참고로 이전에 많이 사용되었던 [remark-slug](https://github.com/remarkjs/remark-slug)는 deprecated 되었습니다.\n\nHeadings Link의 className를 아래와 같이 커스텀하게 지정할 수 있습니다.\n\n```ts:libs/mdx.ts\nimport { serialize } from 'next-mdx-remote/serialize';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\n\nexport const serializeMdx = (source: string) => {\n  return serialize(source, {\n    //...\n    mdxOptions: {\n      //...\n      rehypePlugins: [\n        [\n          rehypeAutolinkHeadings,\n          {\n            properties: {\n              className: ['anchor'],\n            },\n          },\n        ],\n      ],\n    },\n  });\n};\n```\n\n기본적으로 css의 `content`를 활용해서 `anchor`를 만들 수 있습니다.\n\n```css {11}\n.prose .anchor {\n  @apply invisible absolute no-underline;\n\n  margin-left: -1em;\n  padding-right: 0.5em;\n  cursor: pointer;\n}\n\n.prose .anchor:after {\n  @apply text-gray-300 dark:text-gray-700;\n  content: '#';\n}\n\n.anchor:hover,\n.prose *:hover > .anchor {\n  @apply visible;\n}\n```\n\n적당히 스크롤되도록 `scroll-margin-top`을 추가해주면 금상첨화입니다.\n\n```js:tailwind.config.js\nconst { spacing } = require('tailwindcss/defaultTheme');\n\nmodule.exports = {\n  //...\n  theme: {\n    extend: {\n      typography: (theme) => ({\n        DEFAULT: {\n          css: {\n            //...\n            'h1,h2,h3,h4': {\n              'scroll-margin-top': spacing[32],\n            },\n          }\n        }\n      })\n    }\n  }\n}\n```\n\n---\n\n### @tailwindcss/typography\n\nhttps://tailwindcss.com/docs/typography-plugin\n\ntailwind 기반으로 mdx 마크업을 스타일링하는데 기본 설정만 사용해도 충분히 이쁩니다!\n\n```js:tailwind.config.js\nmodule.exports = {\n  theme: {\n    // ...\n  },\n  variants: {\n    typography: ['dark'],\n  },\n  plugins: [require('@tailwindcss/typography')],\n}\n```\n\n마크다운 컴포넌트 상위에 `prose`를 꼭 씌워줘야하는 것을 잊지 않길 바랍니다!\n\n```tsx\n<div className=\"prose dark:prose-dark\">\n  <MDXRemote {...mdx} />\n</div>\n```\n\n`tailwind.config.js`에서 [커스터마이징](https://tailwindcss.com/docs/typography-plugin#customizing-the-css)을 할수도 있고 `globals.css`에서도 스타일을 정의 할 수 있습니다.  \n관심사에 따라 css 코드들을 분리하면 좋은 것 같습니다.\n\n```css:globals.css\n/* ... */\n@import url(./code.css);\n@import url(./prose.css);\n/* ... */\n```\n\n```css:prose.css\n.prose a {\n  @apply transition-all;\n}\n```\n\n---\n\n## 추천 플로그인\n\n필요에 따라 활용도가 높은 플러그인들입니다. ~~어쩌면 필수~~\n\n---\n\n### remark-math, rehype-katex\n\n```shell\nyarn add -D remark-math rehype-katex\n```\n\n[remark-math](https://github.com/remarkjs/remark-math)과 [rehype-katex](https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex)를 활용하여 mdx에서 수학 수식을 사용할 수 있습니다.\n\n---\n\n### rehype-code-titles\n\nhttps://github.com/josestg/rehype-code-title\n\n코드블럭 제목을 생성해주는 도구입니다.\n\n`확장자:파일명`처럼 사용하면 됩니다. &nbsp; ex. `tsx:pages/_app.tsx`\n\nmdx에서 작성한 것이 아래와 같이 파싱됩니다.\n\n```html\n<div class=\"rehype-code-title\">code.css</div>\n<pre class=\"language-css\">\n  <code class=\"language-css code-highlight\">\n    <span class=\"code-line\">\n      <!-- ... -->\n    </span>\n  </code>\n</pre>\n```\n\n스타일은 역시 직접 작성해줘야 합니다.\n\n```css:code.css\n.prose .rehype-code-title {\n  /* ... */\n  @apply rounded-t-lg border border-b-0 px-5 py-3 text-sm font-bold;\n}\n```\n\n---\n\n### remark-toc\n\nhttps://github.com/remarkjs/remark-toc\n\n`Tabel of Content`를 만들어 주는 도구 입니다.\n\n보통 최상단에 `## TOC` 혹은 `## Table of contents`를 작성해주면 됩니다.\n\n<br />\n<br />\n\n---\n\n## 최종 코드\n\n```ts:libs/mdx.ts\nimport { serialize } from 'next-mdx-remote/serialize';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeCodeTitles from 'rehype-code-titles';\nimport rehypePrism from 'rehype-prism-plus';\nimport rehypeSlug from 'rehype-slug';\nimport remarkGfm from 'remark-gfm';\nimport remarkToc from 'remark-toc';\n\nexport const serializeMdx = (source: string) => {\n  return serialize(source, {\n    parseFrontmatter: true,\n    mdxOptions: {\n      remarkPlugins: [remarkToc, remarkGfm],\n      rehypePlugins: [\n        rehypeSlug,\n        rehypeCodeTitles,\n        rehypePrism,\n        [\n          rehypeAutolinkHeadings,\n          {\n            properties: {\n              className: ['anchor'],\n            },\n          },\n        ],\n      ],\n      format: 'mdx',\n    },\n  });\n};\n```\n\n### 참고\n\nhttps://yceffort.kr/2020/10/migrate-gatsby-from-nextjs  \nhttps://colinhemphill.com/blog/fast-static-syntax-highlighting-for-mdx-in-nextjs\n\nProject Level Snippets  \nhttps://code.visualstudio.com/updates/v1_28#_project-level-snippets\n","slug":"nextjs-blog/4-mdx-plugin","readingMinutes":7,"wordCount":780},{"title":"Next.js 블로그 mdx에서 이미지 복붙하기 (feat. Paste Image)","description":"vscode markdown 파일에서 이미지를 기똥차게 사용해보자!","tags":["next.js","blog","markdown","Paste Image"],"draft":false,"date":"2022-11-15","content":"\nnotion, velog로 글을 작성하다가 vscode로 작성하려다보니 이미지를 추가하는 것이 꽤나 번거롭습니다. 🥲\n일일이 링크를 찾거나 생성해서 수작업으로 넣어줘야 했지요.\n앞으로 글을 그대로 수작업으로 작성해야한다고 생각하면 너무 아찔합니다!\n\n다행히 우리를 구원해줄 vscode 플러그인이 있습니다!  \nmdx에서 이미지를 복사하면 로컬환경에 정적 이미지 리소스를 생성해줍니다.\n\n✨ [**Paste Image**](https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image)  \n다만 gif는 지원되지 않습니다.\n\n## 환경 세팅하기\n\n`.vscode/settings.json` 파일을 생성합니다.  \n레포 단위의 개발환경을 세팅하기 위함입니다.\n\n```json\n{\n  \"pasteImage.defaultName\": \"YYMMDD-HHmmss\",\n  \"pasteImage.basePath\": \"${projectRoot}/public\",\n  \"pasteImage.path\": \"${projectRoot}/public/posts/${currentFileNameWithoutExt}\",\n  \"pasteImage.forceUnixStyleSeparator\": true,\n  \"pasteImage.insertPattern\": \"![${imageFileNameWithoutExt}](${imageFilePath})\",\n  \"pasteImage.prefix\": \"/\"\n}\n```\n\n경로를 mdx 파일 단위로 이미지가 저장되도록 했습니다.\n\n`/posts/nextjs-blog/2-images.mdx`  \n-> `/public/posts/2-images/[YYMMDD-HHmmss].png`\n\nposts와 1:1 매칭하고 싶지만 중간 경로를 추출할 수 있는 방법이 없는 것 같습니다 🥲\n\n## 단축키 설정\n\n저는 간편하게 복붙하기 위해서 단축키도 같이 수정을 해줬습니다.\n\n`.vscode/keybindings.json`\n\n```json\n[\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"-notebook.cell.pasteAbove\",\n    \"when\": \"notebookEditorFocused && !inputFocus\"\n  },\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"-markdown.showPreview\",\n    \"when\": \"!notebookEditorFocused && editorLangId == 'markdown'\"\n  },\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"-markdown.extension.closePreview\",\n    \"when\": \"markdownPreviewFocus\"\n  },\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"extension.pasteImage\",\n    \"when\": \"editorTextFocus\"\n  }\n]\n```\n\n이제 이미지를 복사하고 `shift + cmd + v` 입력하면 이미지가 짜잔 생성됩니다.  \n딜레이가 ~~거의~~ 없다는 사실!\n\n![copy-paste](/posts/6-mdx-images/copy-paste.gif)\n\n![221115-012522](/posts/6-mdx-images/221115-012522.png)\n","slug":"nextjs-blog/6-mdx-images","readingMinutes":2,"wordCount":173},{"title":"Next.js 블로그 Image Optimization","description":"Next.js static html에서 이미지를 기똥차게 사용해보자!","tags":["next.js","blog","image","optimization"],"draft":false,"date":"2022-11-14","content":"\n기본적으로 next/image를 활용하면 이미지를 최적화시킬 수 있습니다.  \n하지만 [static-html-export](https://nextjs.org/docs/advanced-features/static-html-export#unsupported-features) 환경에서는 이를 제공해주지 않는다고 합니다.\n\n[Custom Loader](https://nextjs.org/docs/basic-features/image-optimization#loaders)를 활용해야한다고 하는데 ~~갈 길이 보이지 않습니다~~...  \n라이브러리의 도움을 받아 보도록 합시다!\n\n✨ [**next-export-optimize-images**](https://github.com/dc7290/next-export-optimize-images)\n\ngithub star가 100개 정도인 조금은 빈약한 오픈소스 라이브러리입니다.  \n하지만 기존 `next/image`의 option에 100% 호환할 만큼 강력하고 적용하는 방법 또한 간편하기에 이를 사용해보기로 했습니다.\n\n아래 기능들을 제공해준다고 합니다.\n\n- Optimize images at build time.\n- All options for `next/image` available\n- Convert formats (png → webp, etc.)\n- Download external images locally.\n- Using `sharp`, so it's fast.\n- Cache prevents repeating the same optimization\n- Support TypeScript\n- Support `next/future/image`\n\n## 환경 세팅하기\n\n[공식문서](https://next-export-optimize-images.vercel.app/docs/getting-started) 참고하면 되는데 아래 설정파일 하나면 끝입니다 🫢\n\n`next.config.js`\n\n```js\nconst withExportImages = require('next-export-optimize-images');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = withExportImages({\n  //...\n});\n\nmodule.exports = nextConfig;\n```\n\n`next export` 이후에 따로 최적화 빌드를 실행해줘야 합니다.\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"next build && next export && next-export-optimize-images\"\n  }\n}\n```\n\n## 실험 해보기\n\n[공식문서](https://next-export-optimize-images.vercel.app/docs/examples#set-the-placeholder)대로 placeholder 속성을 지정해보겠습니다.\n\n```tsx\nimport Image from 'next/image';\n\n//...\n\n<Image\n  src=\"/forest.jpg\"\n  alt=\"forest\"\n  width={324}\n  height={486}\n  placeholder=\"blur\"\n  className=\"h-auto\"\n/>;\n```\n\ndev 환경에서의 변환 결과\n\n```html\n<img\n  alt=\"forest\"\n  srcset=\"/forest.jpg?width=384 1x, /forest.jpg?width=750 2x\"\n  src=\"/forest.jpg?width=750\"\n  width=\"324\"\n  height=\"486\"\n  decoding=\"async\"\n  data-nimg=\"1\"\n  class=\"h-auto\"\n  loading=\"lazy\"\n  style=\"color: transparent;\"\n/>\n```\n\nbuild 환경에서의 변환 결과\n\n```html\n<img\n  alt=\"forest\"\n  srcset=\"\n    /_next/static/chunks/images/forest_384_75.jpg 1x,\n    /_next/static/chunks/images/forest_750_75.jpg 2x\n  \"\n  src=\"/_next/static/chunks/images/forest_750_75.jpg\"\n  width=\"324\"\n  height=\"486\"\n  decoding=\"async\"\n  data-nimg=\"1\"\n  class=\"h-auto\"\n  loading=\"lazy\"\n  style=\"color: transparent;\"\n/>\n```\n\ndev 환경에서는 사진 원본을 사용하며 build를 거친 후 3000px 이상의 image가 700px대로 잘 최적화되었습니다!\n\n```javascript\n// 로딩 중\nstyle = \"color:transparent;background-size:cover;background-position:50% 50%;background-repeat:no-repeat;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http%3A//www.w3.org/2000/svg' viewBox='0 0 324 486'%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='20'/%3E%3C/filter%3E%3Cimage preserveAspectRatio='none' filter='url(%23b)' x='0' y='0' height='100%25' width='100%25' href='/_next/static/chunks/images/forest_8_10.jpg'/%3E%3C/svg%3E\")\";\n\n// 로딩 완료\nstyle = 'color: transparent;';\n```\n\n이미지가 로딩되기 전에 `background-image`로 placeholder를 표시합니다.  \n하지만 blur된 이미지는 잘 표시되는진 않는 것 같습니다...\n","slug":"nextjs-blog/2-image-optimization","readingMinutes":3,"wordCount":282}]},"__N_SSG":true}