{"pageProps":{"post":{"title":"Next.js 블로그 mdx에서 이미지 복붙하기 (feat. Paste Image)","description":"vscode markdown 파일에서 이미지를 기똥차게 사용해보자!","tags":["next.js","blog","markdown","Paste Image"],"draft":false,"date":"2022-11-15","content":"\nnotion, velog로 글을 작성하다가 vscode로 작성하려다보니 이미지를 추가하는 것이 꽤나 번거롭습니다. 🥲\n일일이 링크를 찾거나 생성해서 수작업으로 넣어줘야 했지요.\n앞으로 글을 그대로 수작업으로 작성해야한다고 생각하면 너무 아찔합니다!\n\n다행히 우리를 구원해줄 vscode 플러그인이 있습니다!  \nmdx에서 이미지를 복사하면 로컬환경에 정적 이미지 리소스를 생성해줍니다.\n\n✨ [**Paste Image**](https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image)  \n다만 gif는 지원되지 않습니다.\n\n## 환경 세팅하기\n\n`.vscode/settings.json` 파일을 생성합니다.  \n레포 단위의 개발환경을 세팅하기 위함입니다.\n\n```json\n{\n  \"pasteImage.defaultName\": \"YYMMDD-HHmmss\",\n  \"pasteImage.basePath\": \"${projectRoot}/public\",\n  \"pasteImage.path\": \"${projectRoot}/public/posts/${currentFileNameWithoutExt}\",\n  \"pasteImage.forceUnixStyleSeparator\": true,\n  \"pasteImage.insertPattern\": \"![${imageFileNameWithoutExt}](${imageFilePath})\",\n  \"pasteImage.prefix\": \"/\"\n}\n```\n\n경로를 mdx 파일 단위로 이미지가 저장되도록 했습니다.\n\n`/posts/nextjs-blog/2-images.mdx`  \n-> `/public/posts/2-images/[YYMMDD-HHmmss].png`\n\nposts와 1:1 매칭하고 싶지만 중간 경로를 추출할 수 있는 방법이 없는 것 같습니다 🥲\n\n## 단축키 설정\n\n저는 간편하게 복붙하기 위해서 단축키도 같이 수정을 해줬습니다.\n\n`.vscode/keybindings.json`\n\n```json\n[\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"-notebook.cell.pasteAbove\",\n    \"when\": \"notebookEditorFocused && !inputFocus\"\n  },\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"-markdown.showPreview\",\n    \"when\": \"!notebookEditorFocused && editorLangId == 'markdown'\"\n  },\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"-markdown.extension.closePreview\",\n    \"when\": \"markdownPreviewFocus\"\n  },\n  {\n    \"key\": \"shift+cmd+v\",\n    \"command\": \"extension.pasteImage\",\n    \"when\": \"editorTextFocus\"\n  }\n]\n```\n\n이제 이미지를 복사하고 `shift + cmd + v` 입력하면 이미지가 짜잔 생성됩니다.  \n딜레이가 ~~거의~~ 없다는 사실!\n\n![copy-paste](/posts/6-mdx-images/copy-paste.gif)\n\n![221115-012522](/posts/6-mdx-images/221115-012522.png)\n","slug":"nextjs-blog/6-mdx-images","readingMinutes":2,"wordCount":173},"postFooterProps":{"prevPost":{"title":"Next.js 블로그 댓글 기능 추가하기 (feat. giscus)","description":"💎 Giscus를 활용하여 Next.js 블로그에 댓글, 대댓글, 리액션을 달 수 있도록 해주자!","tags":["Next.js","Blog","giscus"],"draft":false,"date":"2022-11-13","content":"\n# giscus\n\n[utterances](https://utteranc.es/)의 영감을 받아 만들어진 오픈소스입니다.   \n기존 Github Issue가 아닌 Github Discussion을 활용하여 댓글을 작성하는 것이 특징입니다.\n\nutterances의 장점(광고없음, 가벼움, github 연동, 깔끔한 UI...)들이 너무나 완벽했지만,  \n개인적으로 하나 아쉬웠던 것이 `대댓글이 직관적이지 않다`는 것입니다.\n\ngiscus는 기존 장점을 그대로 가져가면서 아래 추가적인 기능을 제공합니다!\n- 대댓글 작성\n- 댓글 시간순 정렬\n- 댓글 인기순 정렬\n- 페이지에 리액션 달기\n- 귀여운 로딩 UI 제공\n- 강력한 [config](https://github.com/giscus/giscus/blob/main/ADVANCED-USAGE.md#advanced-usage) 제공\n- (덤으로) github에서 전체 댓글들을 더 직관적으로 쉽게 관리\n- (덤으로) 잘 번역된 한글 공식문서 ✨\n\n💎 https://giscus.app/ko \n\n## giscus 연동\n\nGithub Discussion을 연동하기 위해 사전 세팅을 해야합니다.\n\n1. 레포는 `Public`이여야 합니다.\n    - 만약 `private`을 유지하고 싶다면 별도의 `public` 레포(ex. `myusername/comment`)를 생성하면 됩니다.\n2. Github 계정에 [giscus](https://github.com/apps/giscus) 앱을 설치합니다.\n3. Settings에서 [discussions]((https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/enabling-or-disabling-github-discussions-for-a-repository). ) 기능을 활성화 합니다.\n\n<br/>\n\n[공식문서 가이드](https://giscus.app/ko) 따라 `script config`를 생성합니다.\n\n1. 레포 이름 `myusername/myrepo` 입력\n2. Discussion 카테고리 선택\n    - 일반적으로 General 선택하면 됩니다.\n3. 원하는 입맛대로 기능 설정\n    - 가이드 문서의 친절한 설명을 참고해보세요!\n4. 생성된 script config 확인\n    - 위 과정에서 `repo-id` `category-id`를 자동으로 탐지해줍니다!\n\n## 코드 작성\n\n생성된 script config 바탕으로 Next.js에서 활용할 수 있는 컴포넌트를 구현합니다.   \nNext.js 테마에 따라 자동으로 반응하도록 구현했습니다.\n\n```tsx\nimport { useTheme } from 'next-themes';\nimport { useEffect, useRef } from 'react';\n\nexport default function Giscus() {\n  const ref = useRef<HTMLDivElement>(null);\n  const { resolvedTheme } = useTheme();\n\n  // https://github.com/giscus/giscus/tree/main/styles/themes\n  const theme = resolvedTheme === 'dark' ? 'dark' : 'light';\n\n  useEffect(() => {\n    if (!ref.current || ref.current.hasChildNodes()) return;\n\n    const scriptElem = document.createElement('script');\n    scriptElem.src = 'https://giscus.app/client.js';\n    scriptElem.async = true;\n    scriptElem.crossOrigin = 'anonymous';\n\n    scriptElem.setAttribute('data-repo', 'myusername/myrepo');\n    scriptElem.setAttribute('data-repo-id', '[자동]');\n    scriptElem.setAttribute('data-category', 'General');\n    scriptElem.setAttribute('data-category-id', '[자동]');\n    scriptElem.setAttribute('data-mapping', 'pathname');\n    scriptElem.setAttribute('data-strict', '0');\n    scriptElem.setAttribute('data-reactions-enabled', '1');\n    scriptElem.setAttribute('data-emit-metadata', '0');\n    scriptElem.setAttribute('data-input-position', 'bottom');\n    scriptElem.setAttribute('data-theme', theme);\n    scriptElem.setAttribute('data-lang', 'en');\n\n    ref.current.appendChild(scriptElem);\n  }, []);\n\n  // https://github.com/giscus/giscus/blob/main/ADVANCED-USAGE.md#isetconfigmessage\n  useEffect(() => {\n    const iframe = document.querySelector<HTMLIFrameElement>('iframe.giscus-frame');\n    iframe?.contentWindow?.postMessage({ giscus: { setConfig: { theme } } }, 'https://giscus.app');\n  }, [theme]);\n\n  return <section ref={ref} />;\n}\n```\n\n- `theme`을 [직접 제작](https://github.com/giscus/giscus/blob/main/CONTRIBUTING.md#creating-new-themes)할 수도 있습니다.\n- `id` 값들은 어짜피 공개 접근이 가능하기 때문에 따로 `env`로 숨기지 않았습니다.\n- `data-lang`가 `ko`도 지원해주지만 ~~영어가 더 간지나기 때문에~~ 저는 `en`을 선택했습니다.\n- 만약 utterances를 사용하고 싶다면 [여기 코드](https://github.com/bepyan/bepyan.github.io/blob/main/src/components/Utterances.tsx)를 참고하시면 됩니다.\n- 참고\n    - https://github.com/utterance/utterances/issues/161#issuecomment-820722906\n    - https://github.com/utterance/utterances/issues/549#issuecomment-913070158\n\n\n## Trouble Shooting\n\n### 💥 github 로그인시 home으로 리다이랙팅되는 문제\n\ngiscus는 utterances 처럼 canonical link를 활용하여 로그인 리다이랙팅을 진행합니다.   \n\n따라서 SEO에서 canonical link를 **현재 글 주소**로 잘 설정해주면 됩니다.\n\nhttps://github.com/utterance/utterances/issues/474#issuecomment-774887936\n","slug":"nextjs-blog/5-comments","readingMinutes":4,"wordCount":377},"nextPost":{"title":"Next.js 블로그 Google Analytics 연동하기","description":"블로그에 Google Analytics v4를 심어주자!","tags":["Next.js","Blog","Typescript","GA"],"draft":false,"date":"2022-11-16","content":"\n✨ [**google analytics**](https://analytics.google.com/analytics/web/)\n2020년도에 공식 릴리즈된 web-based 사용자 행동 분석 서비스입니다.   \n사용자의 유입, 스크롤, 검색, 클릭 등 이벤트를 자도으로 수집해줍니다.   \n참고로 firebase analytics는 app-based 분석 서비스로 iOS, AOS 앱을 개발할 때 사용하면 좋습니다.\n\n사이트에 들어가면 어렵지않게 이를 세팅할 수 있습니다.\n\n관리 > 속성 만들기  \n관리 > 데이터 스트림 > 스트림 추가  \n관리 > 데이터 스트림 > 스트림 선택 > 태그 안내 보기 > 직접 설치\n\n```html\n<!-- Google tag (gtag.js) -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=###\"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag() {\n    dataLayer.push(arguments);\n  }\n  gtag('js', new Date());\n\n  gtag('config', '###');\n</script>\n```\n\n위 예시를 Next.js에 맞게 주입시켜 주면 됩니다.   \nNext.js에서 GA를 사용하는 [공식 예시](https://github.com/vercel/next.js/tree/canary/examples/with-google-analytics)가 있어 그대로 참고하면 됩니다.   \n하지만 js로 작성되어 있어 ts에 호환되도록 추가 작업이 진행되어야 합니다.\n\n```shell\nyarn add -D @types/gtag.js\n```\n\n<br />\n\n`types.d.ts`\n```ts\n/// <reference types=\"gtag.js\" />\n\ndeclare module 'gtag.js';\n```\neslint typescript에서 에러를 던질 수 있는데 `.eslintignore`에 `*.d.ts`를 추가하여 무시해주도록 합니다.\n\n<br />\n\n이제 3 파일을 수정하면 됩니다.\n\n[libs/gtags.ts](https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/lib/gtag.js)\n```ts\nexport const GA_TRACKING_ID = '<어짜피 HTML에 노출된다>';\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/pages\nexport const pageview = (url: URL) => {\n  window.gtag('config', GA_TRACKING_ID, {\n    page_path: url,\n  });\n};\n\n// https://developers.google.com/analytics/devguides/collection/gtagjs/events\nexport const event = (\n  action: Gtag.EventNames,\n  { event_category, event_label, value }: Gtag.EventParams,\n) => {\n  window.gtag('event', action, {\n    event_category,\n    event_label,\n    value,\n  });\n};\n```\n\n[_app.tsx](https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js)\n\n[_document.tsx](https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_document.js)\n\n<br />\n\n배포 이후 태그가 잘 추가되었는지 확인 해봅시다!   \nhtml에서 `gtag-init`를 검색해보면 쉽게 찾을 수 있습니다.\n\n![221116-134704](/posts/google-analytics/221116-134704.png)\n\n이제 48시간 내에 해당 태그가 수집되어 GA가 사용자의 행동을 추적하게 됩니다.   \n\n<br />\n\n진짜 마지막으로 GA와 Search Console를 연동해주도록 합시다.\n- 관리 > Search Console 링크 > 연결\n\n![221116-140526](/posts/google-analytics/221116-140526.png)\n\n참고\n- https://andrew-simpson-ross.medium.com/strongly-typed-google-analytics-v4-with-next-js-aad6c6a5e383\n","slug":"nextjs-blog/google-analytics","readingMinutes":3,"wordCount":260}},"serize":{"title":"Next.js로 블로그 만들기","description":"100% 취향 반영, 내 손으로 직접 블로그를 만들어 보자!!","tags":[],"draft":false,"date":"2022-11-11","posts":[{"title":"Project Boilerplate 세팅하기","description":"next-mdx-remote 에서 플로그인 쓰는 법","tags":["nextjs","blog"],"date":"2022-11-11","slug":"nextjs-blog/1-boilerplate","readingMinutes":1,"wordCount":14},{"title":"Next.js 블로그 Image Optimization","description":"Next.js static html에서 이미지를 기똥차게 사용해보자!","tags":["next.js","blog","image","optimization"],"draft":false,"date":"2022-11-14","slug":"nextjs-blog/2-image-optimization","readingMinutes":3,"wordCount":282},{"title":"Next.js 블로그 글 리스트 만들기","description":"디랙토리 기반을 글 리스트를 만들자 🤔","tags":["Next.js","Blog"],"date":"2022-11-11","slug":"nextjs-blog/3-blog-list","readingMinutes":1,"wordCount":115},{"title":"Next.js mdx plugin","description":"`next-mdx-remote`에서 플로그인으로 이쁜 결과물을 만들자.","tags":["next.js","blog"],"draft":false,"date":"2022-11-25","slug":"nextjs-blog/4-mdx-plugin","readingMinutes":7,"wordCount":780},{"title":"Next.js 블로그 댓글 기능 추가하기 (feat. giscus)","description":"💎 Giscus를 활용하여 Next.js 블로그에 댓글, 대댓글, 리액션을 달 수 있도록 해주자!","tags":["Next.js","Blog","giscus"],"draft":false,"date":"2022-11-13","slug":"nextjs-blog/5-comments","readingMinutes":4,"wordCount":377},{"title":"Next.js 블로그 mdx에서 이미지 복붙하기 (feat. Paste Image)","description":"vscode markdown 파일에서 이미지를 기똥차게 사용해보자!","tags":["next.js","blog","markdown","Paste Image"],"draft":false,"date":"2022-11-15","slug":"nextjs-blog/6-mdx-images","readingMinutes":2,"wordCount":173},{"title":"Next.js 블로그 Google Analytics 연동하기","description":"블로그에 Google Analytics v4를 심어주자!","tags":["Next.js","Blog","Typescript","GA"],"draft":false,"date":"2022-11-16","slug":"nextjs-blog/google-analytics","readingMinutes":3,"wordCount":260},{"title":"Next.js 블로그 sitemap 생성, 검색엔진 등록","description":"`next-sitemap` 라이브러리를 사용해서 쉽게 sitemap 만들고 검색엔진에 등록하자.","tags":["Next.js","Blog","SEO"],"draft":false,"date":"2022-11-15","slug":"nextjs-blog/sitemap","readingMinutes":4,"wordCount":319}],"readingMinutes":25,"slug":"nextjs-blog"},"slug":"nextjs-blog/6-mdx-images","compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    br: \"br\",\n    a: \"a\",\n    strong: \"strong\",\n    h2: \"h2\",\n    span: \"span\",\n    code: \"code\",\n    pre: \"pre\",\n    del: \"del\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"notion, velog로 글을 작성하다가 vscode로 작성하려다보니 이미지를 추가하는 것이 꽤나 번거롭습니다. 🥲\", _jsx(_components.br, {}), \"\\n\", \"일일이 링크를 찾거나 생성해서 수작업으로 넣어줘야 했지요.\", _jsx(_components.br, {}), \"\\n\", \"앞으로 글을 그대로 수작업으로 작성해야한다고 생각하면 너무 아찔합니다!\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"다행히 우리를 구원해줄 vscode 플러그인이 있습니다!\", _jsx(_components.br, {}), \"\\n\", \"mdx에서 이미지를 복사하면 로컬환경에 정적 이미지 리소스를 생성해줍니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"✨ \", _jsx(_components.a, {\n        href: \"https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: _jsx(_components.strong, {\n          children: \"Paste Image\"\n        })\n      }), _jsx(_components.br, {}), \"\\n\", \"다만 gif는 지원되지 않습니다.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"환경-세팅하기\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#환경-세팅하기\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"환경 세팅하기\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \".vscode/settings.json\"\n      }), \" 파일을 생성합니다.\", _jsx(_components.br, {}), \"\\n\", \"레포 단위의 개발환경을 세팅하기 위함입니다.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.defaultName\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"YYMMDD-HHmmss\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.basePath\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"${projectRoot}/public\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.path\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"${projectRoot}/public/posts/${currentFileNameWithoutExt}\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.forceUnixStyleSeparator\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"true\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.insertPattern\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"![${imageFileNameWithoutExt}](${imageFilePath})\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"pasteImage.prefix\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"/\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"경로를 mdx 파일 단위로 이미지가 저장되도록 했습니다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"/posts/nextjs-blog/2-images.mdx\"\n      }), _jsx(_components.br, {}), \"\\n\", \"-> \", _jsx(_components.code, {\n        children: \"/public/posts/2-images/[YYMMDD-HHmmss].png\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"posts와 1:1 매칭하고 싶지만 중간 경로를 추출할 수 있는 방법이 없는 것 같습니다 🥲\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"단축키-설정\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#단축키-설정\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"단축키 설정\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저는 간편하게 복붙하기 위해서 단축키도 같이 수정을 해줬습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \".vscode/keybindings.json\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-json\",\n      children: _jsxs(_components.code, {\n        className: \"language-json code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"[\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"key\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"shift+cmd+v\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"command\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"-notebook.cell.pasteAbove\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"when\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"notebookEditorFocused && !inputFocus\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"key\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"shift+cmd+v\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"command\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"-markdown.showPreview\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"when\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"!notebookEditorFocused && editorLangId == 'markdown'\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"key\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"shift+cmd+v\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"command\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"-markdown.extension.closePreview\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"when\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"markdownPreviewFocus\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"key\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"shift+cmd+v\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"command\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"extension.pasteImage\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token property\",\n            children: \"\\\"when\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"editorTextFocus\\\"\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"]\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"이제 이미지를 복사하고 \", _jsx(_components.code, {\n        children: \"shift + cmd + v\"\n      }), \" 입력하면 이미지가 짜잔 생성됩니다.\", _jsx(_components.br, {}), \"\\n\", \"딜레이가 \", _jsx(_components.del, {\n        children: \"거의\"\n      }), \" 없다는 사실!\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/6-mdx-images/copy-paste.gif\",\n        alt: \"copy-paste\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/6-mdx-images/221115-012522.png\",\n        alt: \"221115-012522\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tableOfContents":[{"slug":"환경-세팅하기","text":"환경 세팅하기","subSections":[]},{"slug":"단축키-설정","text":"단축키 설정","subSections":[]}]},"__N_SSG":true}