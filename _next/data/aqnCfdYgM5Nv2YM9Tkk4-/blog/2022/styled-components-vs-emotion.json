{"pageProps":{"post":{"title":"styled-components 과 emotion, 도대체 차이가 뭔가?","description":"styled-components vs emotion 💥 도대체 차이가 뭘까??","icon":"","image":"","tags":["styled-components","emotion"],"draft":false,"date":"2022-02-10","content":"\nReact에서는 보통 CSS-in-JS을 통해 스타일 작업을 진행한다.\n그중에서 styled-components, emotion이 가장 유명하고 많이 사용된다.\n\n하지만 도대체 차이가 뭘까?\n\n<br />\n<br />\n<br />\n\n### 제공하는 기능 비교\n\n---\n\n| library           | Attaching Props | Media Queries | Global Styles | Nested Selectors | Server Side Rendering | Theming Support | Composition |\n| ----------------- | --------------- | ------------- | ------------- | ---------------- | --------------------- | --------------- | ----------- |\n| styled-components | Yes             | Yes           | Yes           | Yes              | Yes                   | Yes             | Yes         |\n| emotion           | Yes             | Yes           | Yes           | Yes              | Yes                   | Yes             | Yes         |\n\n- 전반적인 스타일 기능은 똑같다.\n- 둘다 sass문법을 사용하기에 스타일 문법에도 차이가 없다.\n- [참고](https://github.com/jsjoeio/styled-components-vs-emotion)\n\n<br />\n<br />\n<br />\n<br />\n\n### 사용 트랜드\n\n---\n\n![](https://images.velog.io/images/bepyan/post/3d77564b-92a7-46c3-843c-325af34ef765/image.png)\n\n![](https://images.velog.io/images/bepyan/post/ce8b2326-f3a4-4834-935f-affb3e194a2b/image.png)\n\n- styled-componets가 더 많이 사용되고 있으나 npm 다운로드 횟수를 보면 emotion이 더 많다.\n- 근래 emotion의 만족도가 떨어지고 있다.\n- [https://2021.stateofcss.com/en-US/technologies/css-in-js/](https://2021.stateofcss.com/en-US/technologies/css-in-js/)\n- [https://www.npmtrends.com/@emotion/core-vs-styled-components](https://www.npmtrends.com/@emotion/core-vs-styled-components)\n\n<br />\n<br />\n<br />\n<br />\n\n### 용량? 성능?\n\n---\n\n블로그, 사이트들을 참고하면 대게 emotion이 styled-components보다 조금 가볍고 빠르다고 한다.\n\n먼저 https://bundlephobia.com/ 를 참고해서 최신 라이브러리 번들 사이즈를 살펴보자.\n\n![](https://images.velog.io/images/bepyan/post/a702e482-5850-48af-aea8-dd37522a4bd2/image.png)\n\n![](https://images.velog.io/images/bepyan/post/2cbaf6aa-3e4c-4fc9-8495-91eb3ebfc807/image.png)\n\n![](https://images.velog.io/images/bepyan/post/7b926716-1280-4530-a272-bda929c9c518/image.png)\n\n보통 emotion을 사용한다면 위 두가지 라이브러리를 모두 사용한다.\nemotion 패키지 차이는 [여기](https://emotion.sh/docs/package-summary) 참고.\n\n눈대중으로 보면 라이브러리 용량이 비슷해보인다. (1~2 kb 차이)\n다만 `@emotion/react`만 사용한다면 용량이 1.5배 정도 차이가 난다.\n\n<br />\n<br />\n\n그렇다면 속도 차이는 어떨까?\n\n다양한 자료를 참고해보면 emotion이 근소하게 더 빠르다.\n[참고 1](https://stitches.dev/docs/benchmarks), [참고 2](https://dev.to/meetdave3/styled-components-vs-emotion-js-a-performance-perspective-4eia), [참고 3](https://github.com/A-gambit/CSS-IN-JS-Benchmarks/blob/master/RESULT.md)\n\n하지만 [2020 styled-component v5](https://styled-components.com/releases#v5.0.0) ?\n[여기](https://medium.com/styled-components/announcing-styled-components-v5-beast-mode-389747abd987) 참고에 따르면 styled-components가 조금 더 빠르다고 한다.\n\n**결론. 성능상 둘은 유의미하게 차이가 나지 않는다.**\nemotion의 퍼포먼스가 전반적으로 더 좋게 나오고 있고 라이브러리 버전에 따라서 차이가 발생할 수 있다.\n\n<br />\n<br />\n<br />\n<br />\n\n### emotion의 차별점\n\n---\n\n[**css props**](https://emotion.sh/docs/css-prop) 기능\n\n- 인라인 스타일을 작성하지만 클래스가 되는 매직 ✨\n\n```html\n<div style={{color: \"red\"}}/>\n```\n\n기존 style 속성은 HTML 인라인 스타일로 주입이 된다.\n스타일 우선순위를 다루기 어렵고 스타일 재활용도 힘들다.\n\n```html\n<div css={{color: \"red\"}} /> {/* 혹은 */}\n<div css=\"{css`color:\" red`} />\n```\n\nemotion jsx에서 제공해주는 css 속성을 활용하면 이를 클래스로 변환해준다.\n기존 인라인으로 사용할 수 없었던 media query, pseudo selector, nested selector 등을 사용할 수 있다.\n\n<br />\n- [css props를 결합](https://velog.io/@velopert/create-your-own-design-system-with-storybook#%EB%B2%84%ED%8A%BC%EC%9D%98-theme-%EB%A7%8C%EB%93%A4%EA%B8%B0)하여 복잡한 스타일링을 진행할 수 있다.\n  ```js\n  <div css={[style, themes[theme], sizes[size]]} />\n    \n  const themes = {\n    primary: css`\n      color: red;\n    `,  \n    secondary: css`\n      color: blue;\n    `\n  }\n  const sizes = {\n    small: css`\n      fontSize: 0.75rem;\n    `,\n    medium: css`\n      fontSize: 1rem;\n    `\n  }\n  ```\n  위와 같이 css 변수를 조립하여 컴포넌트 스타일링을 진행할 수 있다.\n  ```ts\n  type ThemeType = keyof typeof themes;\n  type SizeType = keyof typeof size;\n  ```\n  typescript로 자동 타입지정까지 할 수 있는 이점이 있다.\n  \n  css override는 덤\n\n<br />\n<br />\n\n**SSR**\n\n- SSR에서 [별도의 설정 없이](https://emotion.sh/docs/ssr#gatsby-focus-wrapper) 동작이 된다.\n- 반면 styled-components 같은 경우 [ServerStyleSheet](https://styled-components.com/docs/advanced#streaming-rendering)을 설정 해야 한다.\n\n<br />\n<br />\n\n개인적으로 생각하는 단점\n\n- 파일마다 `/** @jsx jsx */` 라는 [JSX Pragma](https://emotion.sh/docs/css-prop#jsx-pragma)를 작성해야하는데 이를 설정하기 귀찮다.\n- 이는 React의 jsx와 똑같은 원리이다.\n  `import React from \"react\"`을 해줘야 컴파일이 된다.\n  ![](https://images.velog.io/images/bepyan/post/4214bfb7-8caa-4086-a4c3-48e98aaf408f/image.png)\n  emotion의 jsx로 변환되어야 emotion의 css props 문법을 사용할 수 있다.\n  `<img src=\"avatar.png\" />` → `jsx('img', { src: 'avatar.png' })`\n  <br />\nreact처럼 webpack단에서 이를 자동으로 주입시킬 수 있지만 역시 설정하기 귀찮다...\n개인적으론 storybook 웹팩 설정에서 꽤나 골머리 아팠다...\n\n<br />\n<br />\n<br />\n<br />\n\n### 결론\n\n---\n\n- 유의미한 성능차이가 있는 것이 아니다. 라이브러리 버전에 따라 달라질 수 있다.\n\n- 개발팀에서 더 익숙한 것을 사용하면 될 것 같다.\n\n- emotion의 css props로 css를 더 활용도 높게 조립할 수 있다. 하지만 안쓰면 그만이다.\n\n- SSR에서는 emotion 세팅시 더 간편하다.\n\n<br />\n<br />\n\n참고\n\nhttps://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/\nhttps://github.com/andreipfeiffer/css-in-js/blob/main/README.md#styled-components\nhttps://brunch.co.kr/@kmongdev/17\n","slug":"/blog/2022/styled-components-vs-emotion","readingMinutes":6,"wordCount":592},"postFooterProps":{"prevPost":{"title":"M1 터미널 아키텍처 설정 (arm64, x86_64)","description":"","icon":"","image":"","tags":["infra"],"draft":false,"date":"2022-04-27","content":"\n모듈을 다운 받다가 아래 에러를 마주쳤다..\n\n```\nError: Your platform and architecture (Darwin-arm64) is unsupported.\n```\n\nIntel 프로세서 아키텍처는 x86_64 이고 Apple Silicon M1은 arm64 아키텍처를 사용한다.\n해당 모듈은 arm64 아키텍처를 지원하지 않아 발생한 에러다.\n~~M1,,, 또 너냐,,,~~\n\n---\n\n## 터미널 아키텍처 바꾸기\n\n```shell\narch -arch x86_64 /bin/zsh\n```\n\n터미널에서 아키텍처를 바꿀 수 있다.\n\n```shell\narch -arch arm64e /bin/zsh\n```\n\n계속 x86_64 아키텍처를 사용할 수도 없고 해당 커멘드를 매번 입력하기 버겁다...\n~~아무래도 x86_64환경이 더 느리다.~~\n\n---\n\n## 커멘드 alias 설정\n\n```jsx\nvi ~/.zshrc\n```\n\n빠르게 터미널 환경을 변경할 수 있도록 설정\n\n```jsx\nalias za=\"arch -arch arm64e /bin/zsh\"\nalias zx=\"arch -arch x86_64 /bin/zsh\"\n```\n\n```jsx\nsource ~/.zshrc\n```\n\n이제 터미널에 `za` `zx`만 입력해도 아키텍처를 바꿀 수 있다.\n하지만 뭔가 불편하다.. 내 터미널은 지금 어떤 아키텍처를 사용하고 있지..?\n\n---\n\n## 터미널에서 현 아키텍처 표시하기\n\n> Powerlevel10k에서 커스텀 프롬프트를 만들면 된다.\n\n```jsx\nopen ~/.p10k.zsh\n```\n\nprompt_example 찾아 밑에 아래 코드를 복사 한다.\n\n```jsx\nfunction prompt_arch() {\n  if [[ $(arch) == \"i386\" ]]; then\n   p10k segment -t '🐢'\n  fi\n}\n\nfunction instant_prompt_arch() {\n  prompt_arch\n}\n```\n\n`POWERLEVEL9K_LEFT_PROMPT_ELEMENTS`를 찾아 `arch`를 추가한다.\n\n```jsx\ntypeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(\n  # os_icon               # os identifier\n  dir                     # current directory\n  vcs                     # git status\n  prompt_char             # prompt symbol\n  **arch**\n)\n```\n\n![](https://velog.velcdn.com/images/bepyan/post/e059e686-2f8b-45ae-a78f-12970de067d3/image.png)\n\n뚜벅 뚜벅 귀엽다 🥰\n\n---\n\n**참고 자료**\n\n- [https://xo.dev/m1-terminal-environment-setup/](https://xo.dev/m1-terminal-environment-setup/)\n","slug":"/blog/2022/m1-muti-terminal-architecture","readingMinutes":2,"wordCount":212},"nextPost":{"title":"Drag 이벤트 뽀개기","description":"라이브러리 없이 React에서 element를 커서로 움직이게 하자!!!","tags":["Next.js","React","DOM"],"draft":false,"date":"2022-10-01","content":"\ndrag관련해서 좋은 라이브러리들이 있지만 순수하게 구현해보고 싶다.\n아래의 스펙으로 구현을 시작해보자 🏄🏻‍♂️\n\n- `NextJS` `React`\n- `Typescript`\n- `tailwindcss`\n\n---\n\n## TL;DR\n> `mousedown`에서 `mousemove` `mouseup` 이벤트를 등록한다.\n> `mousemove`에서 `event.pageX`와 `mousedown`의 `event.pageX` 차이를 활용해 엘리먼트를 이동시킨다.\n> `mouseup`에서 `mousemove` 이벤트를 해제시킨다.\n\n---\n\n## 사전 지식 — DOM 이해\n\n마우스의 움직임 바탕으로 element의 위치를 이동시켜야 한다.\n따라서 마우스 관련 이벤트를 잘 이해해야 한다.\n\n`mousedown` — 마우스 클릭 이벤트\n`mousemove` — 마우스 이동 이벤트\n`mouseup` — 마우스 클릭 해제 이벤트\n[https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent)\n\n위 DOM 이벤트를 활용하여 마우스의 정보를 받아 올 수 있을 것 같다.\n그렇다면 **MouseEvent**는 어떤 속성을 가지고 있을까?\n비슷 비슷하게 보이는 친구들이 많은데 차이를 비교해보자.\n\n| Properties     |                                                                                                    |\n| -------------- | -------------------------------------------------------------------------------------------------- |\n| **x, clientX** | in local (DOM content) coordinates.<br />event가 발생되는 element 기준으로 위치를 산정한다.        |\n| **pageX**      | relative to the whole document.<br />page document을 기준으로 위치를 산정한다.                     |\n| **screenX**    | in global (screen) coordinates.<br />더 나아가 듀얼 모니터의 주 모니터를 기준으로 위치를 산정한다. |\n\n무엇을 사용하던 크게 문제될 것이 없어보여 screenX을 사용해보자.\n\n---\n\n## 기본 원리 — Drag 이벤트 등록\n\n그렇다면 DOM 이벤트를 활용하여 마우스의 움직임을 추적해보자!\n주요 로직은 아래와 같다.\n\n1. 클릭시(`onMouseDown`) document에 `mousemove` `mouseup` 이벤트를 등록한다.\n2. 클릭된 상태에서 마우스를 움직일시 `mousemove`에 등록 된 함수가 계속 호출된다.\n3. `mouseup` 이벤트에서 `mousemove` 이벤트를 제거한다.\n\n```jsx\n<div\n  onMouseDown={() => {\n    // 2️⃣\n    const mouseMoveHandler = (e: MouseEvent) => {\n      console.log(`mouse move x:${e.screenX} y:${e.screenY}`);\n    };\n\n    // 3️⃣\n    const mouseUpHandler = (e: MouseEvent) => {\n      console.warn(`>>>> mouse up x:${e.screenX} y:${e.screenY}`);\n      document.removeEventListener('mousemove', mouseMoveHandler);\n    };\n\n    // 1️⃣\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('mouseup', mouseUpHandler, { once: true });\n    // mouseup 이벤트는 한번만 실행되면 되기에 { once: true } 옵션을 추가해준다.\n  }}\n/>\n```\n\n![](https://velog.velcdn.com/images/bepyan/post/40730059-40c1-4a9c-8fc9-c9abfd59c82d/image.gif)\n\n---\n\n## 기본 응용 — Drag 위치 이동\n\n마우스의 움직임을 추적하였으니,\n이제 이를 활용하여 element를 drag해서 위치를 움직여보자!\n\n1. element의 `position` 상태를 정의한다.\n2. 클릭(`mousedown`) 이벤트 발생시의 커서 위치를 기준으로,\n   이동(`mousemove`) 이벤트에서 **상대적으로 이동한 거리(deltaX, deltaY)**를 계산한다.\n3. `position` 상태를 변경하여 element를 움직이게 한다.\n\n```tsx\n// 1️⃣\nconst [{ x, y }, setPosition] = useState({\n  x: 0,\n  y: 0,\n});\n\nreturn (\n  <div>\n    <div\n      style={{ transform: `translateX(${x}px) translateY(${y}px)` }}\n      onMouseDown={(clickEvent: React.MouseEvent<Element, MouseEvent>) => {\n        const mouseMoveHandler = (moveEvent: MouseEvent) => {\n          // 2️⃣\n          const deltaX = moveEvent.screenX - clickEvent.screenX;\n          const deltaY = moveEvent.screenY - clickEvent.screenY;\n\n          // 3️⃣\n          setPosition({\n            x: x + deltaX,\n            y: y + deltaY,\n          });\n        };\n\n        const mouseUpHandler = () => {\n          document.removeEventListener('mousemove', mouseMoveHandler);\n        };\n\n        document.addEventListener('mousemove', mouseMoveHandler);\n        document.addEventListener('mouseup', mouseUpHandler, { once: true });\n      }}\n    />\n  </div>\n);\n```\n\n![](https://velog.velcdn.com/images/bepyan/post/5c38729e-f30e-406f-92e6-de16918f87c0/image.gif)\n\n(TIP)\n에니메니션 인터랙션을 고려할 경우,\n실제 drag할 element(`Box`)를 div로 씌워서 이벤트, style를 등록 것이 좋다.\n\n`transition: transform` 경우 원치않게 에니메이션 효과가 적용될 수 있다.\n\n```jsx\n<div\n\tstyle={...}\n\tonMouseDown={...}\n>\n\t<Box />\n</div>\n```\n\n---\n\n## 심화 응용 — **Drag Boundary**\n\ndrag할 때 특정 영역(boundary)을 벗어나지 않길 원할 수 있다.\n위 2번 과정, `mousemove`이벤트에서 **특정 범위를 벗어나지 않도록 제한**하면 된다.\n\n![](https://velog.velcdn.com/images/bepyan/post/ac92e9bf-fce7-48b5-8a83-acc04b183878/image.png)\n\n#### 1. boundary, box element의 크기를 얻는다.\n\n[getBoundingClientRect](<(https://developer.mozilla.org/ko/docs/Web/API/Element/getBoundingClientRect)>)을 활용하여 element의 정보를 얻을 수 있다.\n\n```tsx\nconst boundary = boundaryRef.current.getBoundingClientRect();\nconst box = boxRef.current.getBoundingClientRect();\n// x, y, width, height\n```\n\n#### 2. drag할 수 있는 경계(minx, maxx, miny, maxy)를 계산한다.\n\nelement를 놓는 기준에 따라 boundary가 달라지는데 상황에 맞게 잘 계산하면 된다.\n\n<br />\n<br />\n\ndrag element이 **중앙 정렬**되었다고 생각해보자.\n기본 box의 위치는 `x:0, y:0`(중앙) 이다.\n\n따라서 element의 제한 범위를 계산해보면\n\n![](https://velog.velcdn.com/images/bepyan/post/26ef16ac-fa25-4c96-b2f7-da4bf5759f0c/image.png)![](https://velog.velcdn.com/images/bepyan/post/332fa024-b6ec-46fe-9b0e-40527d11e101/image.png)\n\n좌측 끝 = `-boundary.width/2` + `box.width/2` + `margin`\n우측 끝 = `boundary.width/2` - `box.width/2` - `margin`\n\n먼저, 범위를 얻는 유틸함수를 만들면 코드가 더 깔끔해질 것 같다.\n\n```tsx\nconst inrange = (v: number, min: number, max: number) => {\n  if (v < min) return min;\n  if (v > max) return max;\n  return v;\n};\n```\n\n코드에 적용하면 아래와 같다.\n\n```tsx\nconst BOUNDARY_MARGIN = 12;\nconst deltaX = moveEvent.screenX - clickEvent.screenX;\nconst deltaY = moveEvent.screenY - clickEvent.screenY;\n\nsetPosition({\n  x: inrange(\n    x + deltaX,\n    Math.floor(-boundary.width / 2 + box.width / 2 + BOUNDARY_MARGIN),\n    Math.floor(boundary.width / 2 - box.width / 2 - BOUNDARY_MARGIN),\n  ),\n  y: inrange(\n    y + deltaY,\n    Math.floor(-boundary.height / 2 + box.height / 2 + BOUNDARY_MARGIN),\n    Math.floor(boundary.height / 2 - box.height / 2 - BOUNDARY_MARGIN),\n  ),\n});\n```\n\n<br />\n<br />\n\n이제 drag element가 **absolute**하다고 생각해보자.\n기본 box의 위치는 boundary의 좌상단(`x:0, y:0`) 이다.\n\n따라서 element의 제한 범위를 계산해보면\n![](https://velog.velcdn.com/images/bepyan/post/1d9d532f-5d0d-45a4-93fc-b2eb12b6ada7/image.png)![](https://velog.velcdn.com/images/bepyan/post/173cb287-673d-478f-a24a-1a3eadf8b8ee/image.png)\n\n좌측 끝 = `margin`\n우측 끝 = `boundary.width` - `box.width` - `margin`\n\n코드에 적용하면 아래와 같다.\n~~코드가 더 깔끔한 느낌은 기분탓인가..~~\n\n```tsx\nconst BOUNDARY_MARGIN = 12;\nconst deltaX = moveEvent.screenX - clickEvent.screenX;\nconst deltaY = moveEvent.screenY - clickEvent.screenY;\n\nsetPosition({\n  x: inrange(\n    x + deltaX,\n    BOUNDARY_MARGIN,\n    boundary.width - box.width - BOUNDARY_MARGIN\n  ),\n  y: inrange(\n    y + deltaY,\n    BOUNDARY_MARGIN\n    boundary.height - box.height - BOUNDARY_MARGIN,\n  ),\n});\n```\n\n![](https://velog.velcdn.com/images/bepyan/post/65b91811-a409-4877-90aa-f589b5768ee8/image.gif)\n\n뭔가 그럴듯한 결과물이 나왔다 ✨✨\n\n---\n\n## 응용 마무리 — 유틸 함수로 만들기\n\n관련된 기능을 유틸 함수로 추출하면 쉽게 element를 적용시킬 수 있을 거 같다.\n\n```tsx\nexport default function registMouseDownDrag(\n  onDragChange: (deltaX: number, deltaY: number) => void,\n  stopPropagation?: boolean,\n) {\n  return {\n    onMouseDown: (clickEvent: React.MouseEvent<Element, MouseEvent>) => {\n      if (stopPropagation) clickEvent.stopPropagation();\n\n      const mouseMoveHandler = (moveEvent: MouseEvent) => {\n        const deltaX = moveEvent.screenX - clickEvent.screenX;\n        const deltaY = moveEvent.screenY - clickEvent.screenY;\n        onDragChange(deltaX, deltaY);\n      };\n\n      const mouseUpHandler = () => {\n        document.removeEventListener('mousemove', mouseMoveHandler);\n      };\n\n      document.addEventListener('mousemove', mouseMoveHandler);\n      document.addEventListener('mouseup', mouseUpHandler, { once: true });\n    },\n  };\n}\n```\n\n`stopPropagation` 경우 click이벤트가 전파되지 않기 위함이다.\n부모 div의 click이벤트가 실행되면 곤란한 경우가 있다...\n\n`onDragChange`를 콜벡으로 받아서 쉽게 커스터마이징을 할 수 있을 것 같다.\n코드에 응용해보자.\n\n```tsx\nconst [{ x, y }, setPosition] = useState({\n  x: 0,\n  y: 0,\n});\n```\n\n```tsx\n<div\n  style={{ left: x, top: y }}\n  {...registMouseDownDrag((deltaX, deltaY) => {\n    setConfig({\n      x: x + deltaX,\n      y: y + deltaY,\n    });\n  })}\n  >\n```\n\n---\n\n실제 동작은 아래 링크에서 볼 수 있습니다.\nhttps://dnd-playground.vercel.app/\n\nstyle 정보, 전체 코드는 아래 깃허브에서 살펴보면 됩니다.\nhttps://github.com/bepyan/dnd-playground/\n","slug":"/blog/dnd-master/1-drag-event","readingMinutes":8,"wordCount":930,"serizeSlug":"dnd-master"}},"serize":null,"slug":"/blog/2022/styled-components-vs-emotion","compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    br: \"br\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    button: \"button\",\n    svg: \"svg\",\n    path: \"path\",\n    h3: \"h3\",\n    a: \"a\",\n    hr: \"hr\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    ul: \"ul\",\n    li: \"li\",\n    img: \"img\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"React에서는 보통 CSS-in-JS을 통해 스타일 작업을 진행한다.\", _jsx(_components.br, {}), \"\\n\", \"그중에서 styled-components, emotion이 가장 유명하고 많이 사용된다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 도대체 차이가 뭘까?\"\n    }), _jsxs(_components.div, {\n      className: \"rehype-code-wrap\",\n      children: [_jsx(_components.pre, {\n        className: \"language-js language-js\",\n        children: _jsxs(_components.code, {\n          className: \"language-js code-highlight code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token operator\",\n              children: \"<\"\n            }), \"div css\", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"[\"\n            }), \"style\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" themes\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"[\"\n            }), \"theme\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"]\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" sizes\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"[\"\n            }), \"size\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"]\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"]\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"/\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \">\"\n            }), \"\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"  \\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"const\"\n            }), \" themes \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"primary\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" css\", _jsxs(_components.span, {\n              className: \"token template-string\",\n              children: [_jsx(_components.span, {\n                className: \"token template-punctuation string\",\n                children: \"`\"\n              }), _jsx(_components.span, {\n                className: \"token css language-css\",\n                children: \"\\n\"\n              })]\n            })]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: _jsx(_components.span, {\n              className: \"token template-string\",\n              children: _jsxs(_components.span, {\n                className: \"token css language-css\",\n                children: [\"    \", _jsx(_components.span, {\n                  className: \"token property\",\n                  children: \"color\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \":\"\n                }), \" \", _jsx(_components.span, {\n                  className: \"token color\",\n                  children: \"red\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \";\"\n                }), \"\\n\"]\n              })\n            })\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token template-string\",\n              children: [_jsx(_components.span, {\n                className: \"token css language-css\",\n                children: \"  \"\n              }), _jsx(_components.span, {\n                className: \"token template-punctuation string\",\n                children: \"`\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"  \\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"secondary\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" css\", _jsxs(_components.span, {\n              className: \"token template-string\",\n              children: [_jsx(_components.span, {\n                className: \"token template-punctuation string\",\n                children: \"`\"\n              }), _jsx(_components.span, {\n                className: \"token css language-css\",\n                children: \"\\n\"\n              })]\n            })]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: _jsx(_components.span, {\n              className: \"token template-string\",\n              children: _jsxs(_components.span, {\n                className: \"token css language-css\",\n                children: [\"    \", _jsx(_components.span, {\n                  className: \"token property\",\n                  children: \"color\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \":\"\n                }), \" \", _jsx(_components.span, {\n                  className: \"token color\",\n                  children: \"blue\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \";\"\n                }), \"\\n\"]\n              })\n            })\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token template-string\",\n              children: [_jsx(_components.span, {\n                className: \"token css language-css\",\n                children: \"  \"\n              }), _jsx(_components.span, {\n                className: \"token template-punctuation string\",\n                children: \"`\"\n              })]\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"const\"\n            }), \" sizes \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"small\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" css\", _jsxs(_components.span, {\n              className: \"token template-string\",\n              children: [_jsx(_components.span, {\n                className: \"token template-punctuation string\",\n                children: \"`\"\n              }), _jsx(_components.span, {\n                className: \"token css language-css\",\n                children: \"\\n\"\n              })]\n            })]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: _jsx(_components.span, {\n              className: \"token template-string\",\n              children: _jsxs(_components.span, {\n                className: \"token css language-css\",\n                children: [\"    \", _jsx(_components.span, {\n                  className: \"token property\",\n                  children: \"fontSize\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \":\"\n                }), \" \", _jsx(_components.span, {\n                  className: \"token number\",\n                  children: \"0.75\"\n                }), _jsx(_components.span, {\n                  className: \"token unit\",\n                  children: \"rem\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \";\"\n                }), \"\\n\"]\n              })\n            })\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token template-string\",\n              children: [_jsx(_components.span, {\n                className: \"token css language-css\",\n                children: \"  \"\n              }), _jsx(_components.span, {\n                className: \"token template-punctuation string\",\n                children: \"`\"\n              })]\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"medium\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" css\", _jsxs(_components.span, {\n              className: \"token template-string\",\n              children: [_jsx(_components.span, {\n                className: \"token template-punctuation string\",\n                children: \"`\"\n              }), _jsx(_components.span, {\n                className: \"token css language-css\",\n                children: \"\\n\"\n              })]\n            })]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: _jsx(_components.span, {\n              className: \"token template-string\",\n              children: _jsxs(_components.span, {\n                className: \"token css language-css\",\n                children: [\"    \", _jsx(_components.span, {\n                  className: \"token property\",\n                  children: \"fontSize\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \":\"\n                }), \" \", _jsx(_components.span, {\n                  className: \"token number\",\n                  children: \"1\"\n                }), _jsx(_components.span, {\n                  className: \"token unit\",\n                  children: \"rem\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \";\"\n                }), \"\\n\"]\n              })\n            })\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token template-string\",\n              children: [_jsx(_components.span, {\n                className: \"token css language-css\",\n                children: \"  \"\n              }), _jsx(_components.span, {\n                className: \"token template-punctuation string\",\n                children: \"`\"\n              })]\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), \"\\n\"]\n          })]\n        })\n      }), _jsxs(_components.button, {\n        className: \"rehype-code-wrap--copy\",\n        children: [_jsxs(_components.svg, {\n          className: \"rehype-code-wrap--copy-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: [_jsx(_components.path, {\n            d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n          }), _jsx(_components.path, {\n            d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n          })]\n        }), _jsx(_components.svg, {\n          className: \"rehype-code-wrap--check-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: _jsx(_components.path, {\n            d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n          })\n        })]\n      })]\n    }), _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), _jsxs(_components.div, {\n      className: \"rehype-code-wrap\",\n      children: [_jsx(_components.pre, {\n        className: \"language-ts language-ts\",\n        children: _jsxs(_components.code, {\n          className: \"language-ts code-highlight code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"type\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token class-name\",\n              children: \"ThemeType\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"keyof\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"typeof\"\n            }), \" themes\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \";\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"type\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token class-name\",\n              children: \"SizeType\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"keyof\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"typeof\"\n            }), \" size\", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \";\"\n            }), \"\\n\"]\n          })]\n        })\n      }), _jsxs(_components.button, {\n        className: \"rehype-code-wrap--copy\",\n        children: [_jsxs(_components.svg, {\n          className: \"rehype-code-wrap--copy-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: [_jsx(_components.path, {\n            d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n          }), _jsx(_components.path, {\n            d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n          })]\n        }), _jsx(_components.svg, {\n          className: \"rehype-code-wrap--check-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: _jsx(_components.path, {\n            d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n          })\n        })]\n      })]\n    }), _jsx(\"br\", {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"제공하는-기능-비교\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#제공하는-기능-비교\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"제공하는 기능 비교\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"library\"\n          }), _jsx(_components.th, {\n            children: \"Attaching Props\"\n          }), _jsx(_components.th, {\n            children: \"Media Queries\"\n          }), _jsx(_components.th, {\n            children: \"Global Styles\"\n          }), _jsx(_components.th, {\n            children: \"Nested Selectors\"\n          }), _jsx(_components.th, {\n            children: \"Server Side Rendering\"\n          }), _jsx(_components.th, {\n            children: \"Theming Support\"\n          }), _jsx(_components.th, {\n            children: \"Composition\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"styled-components\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"emotion\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          }), _jsx(_components.td, {\n            children: \"Yes\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"전반적인 스타일 기능은 똑같다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"둘다 sass문법을 사용하기에 스타일 문법에도 차이가 없다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/jsjoeio/styled-components-vs-emotion\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"참고\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"사용-트랜드\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#사용-트랜드\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"사용 트랜드\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/3d77564b-92a7-46c3-843c-325af34ef765/image.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/ce8b2326-f3a4-4834-935f-affb3e194a2b/image.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"styled-componets가 더 많이 사용되고 있으나 npm 다운로드 횟수를 보면 emotion이 더 많다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"근래 emotion의 만족도가 떨어지고 있다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://2021.stateofcss.com/en-US/technologies/css-in-js/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://2021.stateofcss.com/en-US/technologies/css-in-js/\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.npmtrends.com/@emotion/core-vs-styled-components\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://www.npmtrends.com/@emotion/core-vs-styled-components\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"용량-성능\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#용량-성능\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"용량? 성능?\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"블로그, 사이트들을 참고하면 대게 emotion이 styled-components보다 조금 가볍고 빠르다고 한다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"먼저 \", _jsx(_components.a, {\n        href: \"https://bundlephobia.com/\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"https://bundlephobia.com/\"\n      }), \" 를 참고해서 최신 라이브러리 번들 사이즈를 살펴보자.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/a702e482-5850-48af-aea8-dd37522a4bd2/image.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/2cbaf6aa-3e4c-4fc9-8495-91eb3ebfc807/image.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/7b926716-1280-4530-a272-bda929c9c518/image.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"보통 emotion을 사용한다면 위 두가지 라이브러리를 모두 사용한다.\", _jsx(_components.br, {}), \"\\n\", \"emotion 패키지 차이는 \", _jsx(_components.a, {\n        href: \"https://emotion.sh/docs/package-summary\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"여기\"\n      }), \" 참고.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"눈대중으로 보면 라이브러리 용량이 비슷해보인다. (1~2 kb 차이)\", _jsx(_components.br, {}), \"\\n\", \"다만 \", _jsx(_components.code, {\n        children: \"@emotion/react\"\n      }), \"만 사용한다면 용량이 1.5배 정도 차이가 난다.\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"그렇다면 속도 차이는 어떨까?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"다양한 자료를 참고해보면 emotion이 근소하게 더 빠르다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.a, {\n        href: \"https://stitches.dev/docs/benchmarks\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"참고 1\"\n      }), \", \", _jsx(_components.a, {\n        href: \"https://dev.to/meetdave3/styled-components-vs-emotion-js-a-performance-perspective-4eia\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"참고 2\"\n      }), \", \", _jsx(_components.a, {\n        href: \"https://github.com/A-gambit/CSS-IN-JS-Benchmarks/blob/master/RESULT.md\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"참고 3\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"하지만 \", _jsx(_components.a, {\n        href: \"https://styled-components.com/releases#v5.0.0\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"2020 styled-component v5\"\n      }), \" ?\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.a, {\n        href: \"https://medium.com/styled-components/announcing-styled-components-v5-beast-mode-389747abd987\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"여기\"\n      }), \" 참고에 따르면 styled-components가 조금 더 빠르다고 한다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"결론. 성능상 둘은 유의미하게 차이가 나지 않는다.\"\n      }), _jsx(_components.br, {}), \"\\n\", \"emotion의 퍼포먼스가 전반적으로 더 좋게 나오고 있고 라이브러리 버전에 따라서 차이가 발생할 수 있다.\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"emotion의-차별점\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#emotion의-차별점\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"emotion의 차별점\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://emotion.sh/docs/css-prop\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: _jsx(_components.strong, {\n          children: \"css props\"\n        })\n      }), \" 기능\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"인라인 스타일을 작성하지만 클래스가 되는 매직 ✨\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rehype-code-wrap\",\n      children: [_jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsx(_components.code, {\n          className: \"language-html code-highlight\",\n          children: _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"div\"]\n              }), \" \", _jsxs(_components.span, {\n                className: \"token special-attr\",\n                children: [_jsx(_components.span, {\n                  className: \"token attr-name\",\n                  children: \"style\"\n                }), _jsxs(_components.span, {\n                  className: \"token attr-value\",\n                  children: [_jsx(_components.span, {\n                    className: \"token punctuation attr-equals\",\n                    children: \"=\"\n                  }), _jsxs(_components.span, {\n                    className: \"token value css language-css\",\n                    children: [_jsx(_components.span, {\n                      className: \"token punctuation\",\n                      children: \"{\"\n                    }), _jsx(_components.span, {\n                      className: \"token punctuation\",\n                      children: \"{\"\n                    }), _jsx(_components.span, {\n                      className: \"token property\",\n                      children: \"color\"\n                    }), _jsx(_components.span, {\n                      className: \"token punctuation\",\n                      children: \":\"\n                    })]\n                  })]\n                })]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"\\\"red\\\"}}\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"/>\"\n              })]\n            }), \"\\n\"]\n          })\n        })\n      }), _jsxs(_components.button, {\n        className: \"rehype-code-wrap--copy\",\n        children: [_jsxs(_components.svg, {\n          className: \"rehype-code-wrap--copy-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: [_jsx(_components.path, {\n            d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n          }), _jsx(_components.path, {\n            d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n          })]\n        }), _jsx(_components.svg, {\n          className: \"rehype-code-wrap--check-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: _jsx(_components.path, {\n            d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"기존 style 속성은 HTML 인라인 스타일로 주입이 된다.\", _jsx(_components.br, {}), \"\\n\", \"스타일 우선순위를 다루기 어렵고 스타일 재활용도 힘들다.\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rehype-code-wrap\",\n      children: [_jsx(_components.pre, {\n        className: \"language-html\",\n        children: _jsxs(_components.code, {\n          className: \"language-html code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"div\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"css\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), \"{{color:\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"\\\"red\\\"}}\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"/>\"\n              })]\n            }), \" {/* 혹은 */}\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsxs(_components.span, {\n              className: \"token tag\",\n              children: [_jsxs(_components.span, {\n                className: \"token tag\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"<\"\n                }), \"div\"]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"css\"\n              }), _jsxs(_components.span, {\n                className: \"token attr-value\",\n                children: [_jsx(_components.span, {\n                  className: \"token punctuation attr-equals\",\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                }), \"{css`color:\", _jsx(_components.span, {\n                  className: \"token punctuation\",\n                  children: \"\\\"\"\n                })]\n              }), \" \", _jsx(_components.span, {\n                className: \"token attr-name\",\n                children: \"red`}\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"/>\"\n              })]\n            }), \"\\n\"]\n          })]\n        })\n      }), _jsxs(_components.button, {\n        className: \"rehype-code-wrap--copy\",\n        children: [_jsxs(_components.svg, {\n          className: \"rehype-code-wrap--copy-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: [_jsx(_components.path, {\n            d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n          }), _jsx(_components.path, {\n            d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n          })]\n        }), _jsx(_components.svg, {\n          className: \"rehype-code-wrap--check-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: _jsx(_components.path, {\n            d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"emotion jsx에서 제공해주는 css 속성을 활용하면 이를 클래스로 변환해준다.\", _jsx(_components.br, {}), \"\\n\", \"기존 인라인으로 사용할 수 없었던 media query, pseudo selector, nested selector 등을 사용할 수 있다.\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.a, {\n            href: \"https://velog.io/@velopert/create-your-own-design-system-with-storybook#%EB%B2%84%ED%8A%BC%EC%9D%98-theme-%EB%A7%8C%EB%93%A4%EA%B8%B0\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"css props를 결합\"\n          }), \"하여 복잡한 스타일링을 진행할 수 있다.\"]\n        }), \"\\n\", _jsx(_components.pre, {\n          className: \"language-js language-js\",\n          children: _jsxs(_components.code, {\n            className: \"language-js code-highlight code-highlight\",\n            children: [_jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsx(_components.span, {\n                className: \"token operator\",\n                children: \"<\"\n              }), \"div css\", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"=\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"[\"\n              }), \"style\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \",\"\n              }), \" themes\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"[\"\n              }), \"theme\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"]\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \",\"\n              }), \" sizes\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"[\"\n              }), \"size\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"]\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"]\"\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"/\"\n              }), _jsx(_components.span, {\n                className: \"token operator\",\n                children: \">\"\n              }), \"\\n\"]\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: \"  \\n\"\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsx(_components.span, {\n                className: \"token keyword\",\n                children: \"const\"\n              }), \" themes \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"=\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [\"  \", _jsx(_components.span, {\n                className: \"token literal-property property\",\n                children: \"primary\"\n              }), _jsx(_components.span, {\n                className: \"token operator\",\n                children: \":\"\n              }), \" css\", _jsxs(_components.span, {\n                className: \"token template-string\",\n                children: [_jsx(_components.span, {\n                  className: \"token template-punctuation string\",\n                  children: \"`\"\n                }), _jsx(_components.span, {\n                  className: \"token css language-css\",\n                  children: \"\\n\"\n                })]\n              })]\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: _jsx(_components.span, {\n                className: \"token template-string\",\n                children: _jsxs(_components.span, {\n                  className: \"token css language-css\",\n                  children: [\"    \", _jsx(_components.span, {\n                    className: \"token property\",\n                    children: \"color\"\n                  }), _jsx(_components.span, {\n                    className: \"token punctuation\",\n                    children: \":\"\n                  }), \" \", _jsx(_components.span, {\n                    className: \"token color\",\n                    children: \"red\"\n                  }), _jsx(_components.span, {\n                    className: \"token punctuation\",\n                    children: \";\"\n                  }), \"\\n\"]\n                })\n              })\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsxs(_components.span, {\n                className: \"token template-string\",\n                children: [_jsx(_components.span, {\n                  className: \"token css language-css\",\n                  children: \"  \"\n                }), _jsx(_components.span, {\n                  className: \"token template-punctuation string\",\n                  children: \"`\"\n                })]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \",\"\n              }), \"  \\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [\"  \", _jsx(_components.span, {\n                className: \"token literal-property property\",\n                children: \"secondary\"\n              }), _jsx(_components.span, {\n                className: \"token operator\",\n                children: \":\"\n              }), \" css\", _jsxs(_components.span, {\n                className: \"token template-string\",\n                children: [_jsx(_components.span, {\n                  className: \"token template-punctuation string\",\n                  children: \"`\"\n                }), _jsx(_components.span, {\n                  className: \"token css language-css\",\n                  children: \"\\n\"\n                })]\n              })]\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: _jsx(_components.span, {\n                className: \"token template-string\",\n                children: _jsxs(_components.span, {\n                  className: \"token css language-css\",\n                  children: [\"    \", _jsx(_components.span, {\n                    className: \"token property\",\n                    children: \"color\"\n                  }), _jsx(_components.span, {\n                    className: \"token punctuation\",\n                    children: \":\"\n                  }), \" \", _jsx(_components.span, {\n                    className: \"token color\",\n                    children: \"blue\"\n                  }), _jsx(_components.span, {\n                    className: \"token punctuation\",\n                    children: \";\"\n                  }), \"\\n\"]\n                })\n              })\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsxs(_components.span, {\n                className: \"token template-string\",\n                children: [_jsx(_components.span, {\n                  className: \"token css language-css\",\n                  children: \"  \"\n                }), _jsx(_components.span, {\n                  className: \"token template-punctuation string\",\n                  children: \"`\"\n                })]\n              }), \"\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              }), \"\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsx(_components.span, {\n                className: \"token keyword\",\n                children: \"const\"\n              }), \" sizes \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"=\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"{\"\n              }), \"\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [\"  \", _jsx(_components.span, {\n                className: \"token literal-property property\",\n                children: \"small\"\n              }), _jsx(_components.span, {\n                className: \"token operator\",\n                children: \":\"\n              }), \" css\", _jsxs(_components.span, {\n                className: \"token template-string\",\n                children: [_jsx(_components.span, {\n                  className: \"token template-punctuation string\",\n                  children: \"`\"\n                }), _jsx(_components.span, {\n                  className: \"token css language-css\",\n                  children: \"\\n\"\n                })]\n              })]\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: _jsx(_components.span, {\n                className: \"token template-string\",\n                children: _jsxs(_components.span, {\n                  className: \"token css language-css\",\n                  children: [\"    \", _jsx(_components.span, {\n                    className: \"token property\",\n                    children: \"fontSize\"\n                  }), _jsx(_components.span, {\n                    className: \"token punctuation\",\n                    children: \":\"\n                  }), \" \", _jsx(_components.span, {\n                    className: \"token number\",\n                    children: \"0.75\"\n                  }), _jsx(_components.span, {\n                    className: \"token unit\",\n                    children: \"rem\"\n                  }), _jsx(_components.span, {\n                    className: \"token punctuation\",\n                    children: \";\"\n                  }), \"\\n\"]\n                })\n              })\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsxs(_components.span, {\n                className: \"token template-string\",\n                children: [_jsx(_components.span, {\n                  className: \"token css language-css\",\n                  children: \"  \"\n                }), _jsx(_components.span, {\n                  className: \"token template-punctuation string\",\n                  children: \"`\"\n                })]\n              }), _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \",\"\n              }), \"\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [\"  \", _jsx(_components.span, {\n                className: \"token literal-property property\",\n                children: \"medium\"\n              }), _jsx(_components.span, {\n                className: \"token operator\",\n                children: \":\"\n              }), \" css\", _jsxs(_components.span, {\n                className: \"token template-string\",\n                children: [_jsx(_components.span, {\n                  className: \"token template-punctuation string\",\n                  children: \"`\"\n                }), _jsx(_components.span, {\n                  className: \"token css language-css\",\n                  children: \"\\n\"\n                })]\n              })]\n            }), _jsx(_components.span, {\n              className: \"code-line\",\n              children: _jsx(_components.span, {\n                className: \"token template-string\",\n                children: _jsxs(_components.span, {\n                  className: \"token css language-css\",\n                  children: [\"    \", _jsx(_components.span, {\n                    className: \"token property\",\n                    children: \"fontSize\"\n                  }), _jsx(_components.span, {\n                    className: \"token punctuation\",\n                    children: \":\"\n                  }), \" \", _jsx(_components.span, {\n                    className: \"token number\",\n                    children: \"1\"\n                  }), _jsx(_components.span, {\n                    className: \"token unit\",\n                    children: \"rem\"\n                  }), _jsx(_components.span, {\n                    className: \"token punctuation\",\n                    children: \";\"\n                  }), \"\\n\"]\n                })\n              })\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsxs(_components.span, {\n                className: \"token template-string\",\n                children: [_jsx(_components.span, {\n                  className: \"token css language-css\",\n                  children: \"  \"\n                }), _jsx(_components.span, {\n                  className: \"token template-punctuation string\",\n                  children: \"`\"\n                })]\n              }), \"\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \"}\"\n              }), \"\\n\"]\n            })]\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"위와 같이 css 변수를 조립하여 컴포넌트 스타일링을 진행할 수 있다.\"\n        }), \"\\n\", _jsx(_components.pre, {\n          className: \"language-ts language-ts\",\n          children: _jsxs(_components.code, {\n            className: \"language-ts code-highlight code-highlight\",\n            children: [_jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsx(_components.span, {\n                className: \"token keyword\",\n                children: \"type\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token class-name\",\n                children: \"ThemeType\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"=\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token keyword\",\n                children: \"keyof\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token keyword\",\n                children: \"typeof\"\n              }), \" themes\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \";\"\n              }), \"\\n\"]\n            }), _jsxs(_components.span, {\n              className: \"code-line\",\n              children: [_jsx(_components.span, {\n                className: \"token keyword\",\n                children: \"type\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token class-name\",\n                children: \"SizeType\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token operator\",\n                children: \"=\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token keyword\",\n                children: \"keyof\"\n              }), \" \", _jsx(_components.span, {\n                className: \"token keyword\",\n                children: \"typeof\"\n              }), \" size\", _jsx(_components.span, {\n                className: \"token punctuation\",\n                children: \";\"\n              }), \"\\n\"]\n            })]\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"typescript로 자동 타입지정까지 할 수 있는 이점이 있다.\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"css override는 덤\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"SSR\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"SSR에서 \", _jsx(_components.a, {\n          href: \"https://emotion.sh/docs/ssr#gatsby-focus-wrapper\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"별도의 설정 없이\"\n        }), \" 동작이 된다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"반면 styled-components 같은 경우 \", _jsx(_components.a, {\n          href: \"https://styled-components.com/docs/advanced#streaming-rendering\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"ServerStyleSheet\"\n        }), \"을 설정 해야 한다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"개인적으로 생각하는 단점\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"파일마다 \", _jsx(_components.code, {\n          children: \"/** @jsx jsx */\"\n        }), \" 라는 \", _jsx(_components.a, {\n          href: \"https://emotion.sh/docs/css-prop#jsx-pragma\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"JSX Pragma\"\n        }), \"를 작성해야하는데 이를 설정하기 귀찮다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"이는 React의 jsx와 똑같은 원리이다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.code, {\n          children: \"import React from \\\"react\\\"\"\n        }), \"을 해줘야 컴파일이 된다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.img, {\n          src: \"https://images.velog.io/images/bepyan/post/4214bfb7-8caa-4086-a4c3-48e98aaf408f/image.png\",\n          alt: \"\"\n        }), _jsx(_components.br, {}), \"\\n\", \"emotion의 jsx로 변환되어야 emotion의 css props 문법을 사용할 수 있다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.code, {\n          children: \"<img src=\\\"avatar.png\\\" />\"\n        }), \" → \", _jsx(_components.code, {\n          children: \"jsx('img', { src: 'avatar.png' })\"\n        }), \"\\n\", _jsx(\"br\", {}), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"react처럼 webpack단에서 이를 자동으로 주입시킬 수 있지만 역시 설정하기 귀찮다...\", _jsx(_components.br, {}), \"\\n\", \"개인적으론 storybook 웹팩 설정에서 꽤나 골머리 아팠다...\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"결론\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#결론\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"결론\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"유의미한 성능차이가 있는 것이 아니다. 라이브러리 버전에 따라 달라질 수 있다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"개발팀에서 더 익숙한 것을 사용하면 될 것 같다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"emotion의 css props로 css를 더 활용도 높게 조립할 수 있다. 하지만 안쓰면 그만이다.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"SSR에서는 emotion 세팅시 더 간편하다.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"참고\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"https://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/\"\n      }), _jsx(_components.br, {}), \"\\n\", _jsx(_components.a, {\n        href: \"https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#styled-components\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#styled-components\"\n      }), _jsx(_components.br, {}), \"\\n\", _jsx(_components.a, {\n        href: \"https://brunch.co.kr/@kmongdev/17\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"https://brunch.co.kr/@kmongdev/17\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tableOfContents":[{"slug":"제공하는-기능-비교","text":"제공하는 기능 비교","subSections":[{"slug":"사용-트랜드","text":"사용 트랜드"},{"slug":"용량-성능","text":"용량? 성능?"},{"slug":"emotion의-차별점","text":"emotion의 차별점"},{"slug":"결론","text":"결론"}]}]},"__N_SSG":true}