{"pageProps":{"tag":"Javascript","posts":[],"snippets":[{"title":"(React) Lodash Debounce","description":"","icon":"","image":"","tags":["React","Javascript","Typescript","debounce"],"draft":false,"date":"2022-12-13","content":"\n`javascript`\n\n```shell\nyarn add lodash.debounce\n```\n\n```jsx\nconst App = () => {\n  const [searchValue, setSearchValue] = useState('');\n\n  const searchHandler = useCallback(\n    sdebounce((e) => {\n      setSearchValue(e.target.value);\n    }, 300),\n    [],\n  );\n\n  return (\n    <div>\n      <div>{searchValue}</div>\n      <input type=\"text\" onChange={searchHandler} />\n    </div>\n  );\n};\n```\n\n---\n\n`typescript`\n\n```shell\nyarn add -D @types/lodash.debounce\n```\n\n```ts:useSearch.ts\nimport debounce from 'lodash.debounce';\nimport React, { useCallback, useState } from 'react';\n\nexport default function useSearch(callback?: (value: string) => void, wait = 300) {\n  const [searchValue, setSearchValue] = useState('');\n\n  const searchHandler = useCallback(\n    debounce((e: React.ChangeEvent<HTMLInputElement>) => {\n      const value = e.target.value;\n      callback?.(value);\n      setSearchValue(value);\n    }, wait),\n    [],\n  );\n\n  return { searchValue, searchHandler };\n}\n```\n","slug":"/snippets/react/lodash-debounce","readingMinutes":1,"wordCount":107,"snippetSlug":"react"},{"title":"(JS) FormData로 submit 다루기","description":"form event를 쉽게 다룰 수 있습니다.","icon":"","image":"","tags":["Javascript"],"draft":false,"date":"2022-12-06","content":"\n기본적인 활용법\n\n```js\nconst submitHandle = (e) => {\n  e.preventDefault();\n  const formData = new FormData(e.target);\n  const formDataObj = Object.fromEntries(myFormData.entries());\n\n  console.log(formDataObj);\n};\n```\n\n`checkbox` 같이 여러 값이 있는 경우가 있습니다.\n그럴 경우 [`FormData.getAll()`](https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll)를 활용하여 값을 덮어씌워줘야 합니다.\n\n```js\nconst submitHandle = (e) => {\n  e.preventDefault();\n  const formData = new FormData(e.target);\n  const formDataObj = Object.fromEntries(myFormData.entries());\n  formDataObj.checkboxList = formData.getAll('checkboxList');\n\n  console.log(formDataObj);\n};\n```\n\n---\n\n폐기된 함수들...\n\n```js\nconst submitHandle = (e) => {\n  e.preventDefault();\n  const formData = new FormData(e.target);\n  const formDataObj = Array.from(formData.keys()).reduce((ac, key) => {\n    const dataList = formData.getAll(key);\n    ac[key] = dataList.length > 1 ? dataList : dataList[0];\n    return { ...ac };\n  }, {});\n\n  console.log(formDataObj);\n};\n```\n","slug":"/snippets/javascript/form-data","readingMinutes":1,"wordCount":106,"snippetSlug":"javascript"},{"title":"(JS) console.log 추가 기능","description":"","icon":"","image":"","tags":["Javascript"],"draft":false,"date":"2022-09-23","content":"\n### CSS style\n\n```jsx\nconsole.log('%cfatfish', 'color: red;');\n```\n\n```jsx\nconst getLogStyle = (code) => {\n  const style = 'padding: 4px 8px;';\n\n  if (code >= 200 && code < 300) {\n    return `${style} background: #C2E0C6; color: #000000;`;\n  }\n\n  if (code >= 400 && code < 600) {\n    return `${style} background: #FEF0F0; color: #FF0000;`;\n  }\n\n  return `${style} background: #FEF2C0; color: #000000;`;\n};\n\nconsole.log(`%c${message}`, getLogStyle(code));\n```\n\n### `console.time() & console.timeEnd()`\n\n```jsx\nlet count = 0;\n\nconsole.time();\nfor (let i = 0; i < 1000000000; i++) {\n  count++;\n}\nconsole.timeEnd();\n```\n\n### `console.table()`\n\narray 로그를 찍어 볼 때 유용한 것 같다!\n\n### `groupCollapsed`\n\n```jsx\nconsole.groupCollapsed(`%c${groupTitle}`, getLogStyle(data.code));\nconsole.log('>>> response', response);\nparams && console.log('>>> params', params);\n\nif (data.code !== 200) {\n  console.log('>>> data', data);\n} else {\n  console.log('>>> data', data.data);\n}\n\nconsole.groupEnd();\n```\n","slug":"/snippets/javascript/console","readingMinutes":1,"wordCount":129,"snippetSlug":"javascript"},{"title":"(JS) 클립보드 복사하기","description":"","icon":"","image":"","tags":["Javascript","clipboard"],"draft":false,"date":"2022-09-19","content":"\n```tsx\nexport const copyClipboard = async (url = window.document.location.href) => {\n  try {\n    await navigator.clipboard.writeText(url);\n    alert('링크가 복사되었습니다.');\n  } catch (e) {\n    console.error(e);\n    alert('클립보드 복사에 실패했습니다.');\n  }\n};\n```\n\nhttps://web.dev/i18n/ko/async-clipboard/\n\n---\n\n레거시 방법\n\n```tsx\nexport const copyURL = () => {\n  let currentUrl = window.document.location.href;\n  let t = document.createElement(\"textarea\");\n  document.body.appendChild(t);\n  t.value = currentUrl;\n  t.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(t);\n\n  alert(\"링크가 복사되었습니다.\");\n};\n```\n\nhttps://sezzled.tistory.com/138","slug":"/snippets/javascript/clipboard","readingMinutes":1,"wordCount":61,"snippetSlug":"javascript"},{"title":"(JS) .txt File 만들기","description":"","icon":"","image":"","tags":["Javascript"],"draft":false,"date":"2022-09-03","content":"\nblob을 활용\n\n```tsx\nconst blob = new Blob([JSON.stringify(data)], { type: 'text/plain' });\nconst textFile = window.URL.createObjectURL(blob);\n\nwindow.open(textFile, '_blank');\n```\n\nFile\n\n```tsx\nconst fileName = `${moment(new Date()).format('YYYY-MM-DD HH:mm:ss')}.txt`;\nconst file = new File([JSON.stringify(data)], fileName, {\n  type: 'text/plain;charset=UTF-8',\n});\n```\n\n하지만 한글이 깨지는 문제가 있다.\n\nhttps://www.thecodehubs.com/generate-text-file-using-plain-javascript/\n\n","slug":"/snippets/javascript/txt-file","readingMinutes":1,"wordCount":46,"snippetSlug":"javascript"},{"title":"(JS) regex로 버전 추출하기","description":"","icon":"","image":"","tags":["Javascript","regex"],"draft":false,"date":"2022-06-30","content":"\n```jsx\nconst REGEX = /\\d+(\\.\\d+)+/gi;\nconsole.log(''.match(REGEX));\n```\n\nhttps://stackoverflow.com/questions/8955657/regex-pattern-to-extract-version-number-from-string)\n\n네이버 userAgent에서 네이버 버전 추출하기\n\n```jsx\nconst NAVER_USERAGENT_REGEX = /\\d+(\\.\\d+)+/gi;\nconst agent =\n  'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Mobile/15E148 Safari/605.1 NAVER(inapp; search; 1010; 11.12.7; 12MINI)';\nconst version = agent.match(NAVER_USERAGENT_REGEX);\n\nconsole.log(version);\n```\n\n정규식 문법\n[https://heropy.blog/2018/10/28/regexp/](https://heropy.blog/2018/10/28/regexp/)\n\n`^naver` 문자열이 naver로 시작해야 한다.\n\n`$naver` 문자열이 naver로 끝나야 한다.\n\n`\\d{5}` 숫자 5개가 있어야 한다. ⇒ `\\d\\d\\d\\d\\d`\n\n`\\d{3,5}` 숫자가 3~5개 있어야 한다.\n\n`\\d+` 1개 이상이 있어야 한다. ⇒ `\\d{1,}`\n\n`\\d*` 0개 이상 있어야 한다. ⇒ `\\d{0, }`\n\n`\\d?` 0, 1개 있어야 한다. ⇒ `\\d{0,1}`\n\n`\\d$` 줄 끝에서 일치 한다.\n\n`.` 임의의 한 문자와 일치\n\n`[ab]` a 혹은 b와 일치여부 ⇒ `a | b`\n\n테스트 공간\n[https://regexr.com/](https://regexr.com/)\n\n**`match()`**\n메서드는 문자열이 정규식과 매치되는 부분을 검색합니다.\n","slug":"/snippets/javascript/version-regex","readingMinutes":2,"wordCount":127,"snippetSlug":"javascript"}]},"__N_SSG":true}