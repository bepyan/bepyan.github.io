{"pageProps":{"tag":"image","posts":[{"title":"Next.js 블로그 Image Optimization","description":"Next.js static html에서 이미지를 기똥차게 사용해보자!","tags":["Next.js","Blog","image","optimization"],"draft":false,"date":"2022-11-14","content":"\n기본적으로 next/image를 활용하면 이미지를 최적화시킬 수 있습니다.  \n하지만 [static-html-export](https://nextjs.org/docs/advanced-features/static-html-export#unsupported-features) 환경에서는 이를 제공해주지 않는다고 합니다.\n\n[Custom Loader](https://nextjs.org/docs/basic-features/image-optimization#loaders)를 활용해야한다고 하는데 ~~갈 길이 보이지 않습니다~~...  \n라이브러리의 도움을 받아 보도록 합시다!\n\n✨ [**next-export-optimize-images**](https://github.com/dc7290/next-export-optimize-images)\n\ngithub star가 100개 정도인 조금은 빈약한 오픈소스 라이브러리입니다.  \n하지만 기존 `next/image`의 option에 100% 호환할 만큼 강력하고 적용하는 방법 또한 간편하기에 이를 사용해보기로 했습니다.\n\n아래 기능들을 제공해준다고 합니다.\n\n- Optimize images at build time.\n- All options for `next/image` available\n- Convert formats (png → webp, etc.)\n- Download external images locally.\n- Using `sharp`, so it's fast.\n- Cache prevents repeating the same optimization\n- Support TypeScript\n- Support `next/future/image`\n\n## 환경 세팅하기\n\n[공식문서](https://next-export-optimize-images.vercel.app/docs/getting-started) 참고하면 되는데 아래 설정파일 하나면 끝입니다 🫢\n\n`next.config.js`\n\n```js\nconst withExportImages = require('next-export-optimize-images');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = withExportImages({\n  //...\n});\n\nmodule.exports = nextConfig;\n```\n\n`next export` 이후에 따로 최적화 빌드를 실행해줘야 합니다.\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"next build && next export && next-export-optimize-images\"\n  }\n}\n```\n\n## 실험 해보기\n\n[공식문서](https://next-export-optimize-images.vercel.app/docs/examples#set-the-placeholder)대로 placeholder 속성을 지정해보겠습니다.\n\n```tsx\nimport Image from 'next/image';\n\n//...\n\n<Image\n  src=\"/forest.jpg\"\n  alt=\"forest\"\n  width={324}\n  height={486}\n  placeholder=\"blur\"\n  className=\"h-auto\"\n/>;\n```\n\ndev 환경에서의 변환 결과\n\n```html\n<img\n  alt=\"forest\"\n  srcset=\"/forest.jpg?width=384 1x, /forest.jpg?width=750 2x\"\n  src=\"/forest.jpg?width=750\"\n  width=\"324\"\n  height=\"486\"\n  decoding=\"async\"\n  data-nimg=\"1\"\n  class=\"h-auto\"\n  loading=\"lazy\"\n  style=\"color: transparent;\"\n/>\n```\n\nbuild 환경에서의 변환 결과\n\n```html\n<img\n  alt=\"forest\"\n  srcset=\"\n    /_next/static/chunks/images/forest_384_75.jpg 1x,\n    /_next/static/chunks/images/forest_750_75.jpg 2x\n  \"\n  src=\"/_next/static/chunks/images/forest_750_75.jpg\"\n  width=\"324\"\n  height=\"486\"\n  decoding=\"async\"\n  data-nimg=\"1\"\n  class=\"h-auto\"\n  loading=\"lazy\"\n  style=\"color: transparent;\"\n/>\n```\n\ndev 환경에서는 사진 원본을 사용하며 build를 거친 후 3000px 이상의 image가 700px대로 잘 최적화되었습니다!\n\n```javascript\n// 로딩 중\nstyle = \"color:transparent;background-size:cover;background-position:50% 50%;background-repeat:no-repeat;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http%3A//www.w3.org/2000/svg' viewBox='0 0 324 486'%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='20'/%3E%3C/filter%3E%3Cimage preserveAspectRatio='none' filter='url(%23b)' x='0' y='0' height='100%25' width='100%25' href='/_next/static/chunks/images/forest_8_10.jpg'/%3E%3C/svg%3E\")\";\n\n// 로딩 완료\nstyle = 'color: transparent;';\n```\n\n이미지가 로딩되기 전에 `background-image`로 placeholder를 표시합니다.  \n하지만 blur된 이미지는 잘 표시되는진 않는 것 같습니다...\n","slug":"nextjs-blog/2-image-optimization","readingMinutes":3,"wordCount":282,"serizeSlug":"nextjs-blog"}],"snippets":[]},"__N_SSG":true}