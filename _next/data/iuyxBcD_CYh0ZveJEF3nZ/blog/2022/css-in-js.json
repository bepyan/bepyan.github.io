{"pageProps":{"post":{"title":"CSS-in-JS 라이브러리들에 대한 고찰","description":"다양한 CSS-in-JS 라이브러리가 있는데 이들은 어떤 차이점이 있을까? 더 나아가 어떤 상황에서 어떤 라이브러리를 사용하면 좋을까? 🍀","icon":"","image":"","tags":["styled-component","emotion","linaria","vanilla-extract","stitches"],"draft":false,"date":"2022-02-11","content":"\n## 들어가면서\n\n#### 이 글의 목적\n\n- 다양한 CSS-in-JS 라이브러리가 있는데 이들은 어떤 차이점이 있을까?\n- 더 나아가 어떤 상황에서 어떤 라이브러리를 사용하면 좋을까?\n\n<br />\n\n#### CSS-in-JS가 대세인 이유\n\n- 중복되지 않는 class 이름을 고려할 필요가 없다.\n- JS 코드와 CSS가 상태 값을 공유할 수 있다.\n- 컴포넌트와 스타일 코드를 쉽게 오갈 수 있다.\n- 자동으로 [vendor-prefix](https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix)을 붙여준다.\n\n⇒ **개발 친화적 🌻  DX ( Developer Experience )**\n\n<br />\n\n2020, 2021에 들어서서 많은 CSS-in-JS 라이브러리가 등장했다.\n\n- [https://2021.stateofcss.com/en-US/technologies/css-in-js](https://2021.stateofcss.com/en-US/technologies/css-in-js)\n- [https://risingstars.js.org/2021/en#section-css-in-js](https://risingstars.js.org/2021/en#section-css-in-js)\n\ncss-in-js의 동작 방식은 크게 **runtime**, **zero-runtime** 으로 나눠진다.\nruntime이 반드시 성능저하를 발생시키진 않고 프로젝트 규모와 상황에 따라 달라질 수 있음을 염두하고 살펴보도록 하자.\n\n---\n\n## **runtime**\n\n**javascript runtime에서 필요한 CSS를 동적으로 만들어 적용한다.**\n\n대표적으로 잘 알려진 [styled-component](https://styled-components.com/), [emotion](https://emotion.sh/docs/introduction) 이 있다.\n\n아래 styled-components로 만든 예시를 살펴보자.\n버튼의 상태가 바뀌면서 style 코드가 동적으로 생성되어 삽입되는 것을 볼 수 있다.\n\n![](<https://images.velog.io/images/bepyan/post/7d5ee0a5-d698-4615-a592-15847466cacb/%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB-%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%E1%86%A8-2022-01-25-%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB-12.42.01%20(1).gif>)\n\n- 개발모드에서는 `<style>` 태그에 style을 추가하는 방식을 사용한다.\n\n  - 디버깅에 이점이 있다고 한다.\n\n- 배포 모드에서는 stylesSheet을 [CSSStylesSheet.insertRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule) 통해 바로[CSSOM](https://dkmqflx.github.io/frontend/2020/09/14/jscssom/)에 주입한다.\n  - 성능상의 이짐이 있다고 한다.\n\n<br />\n\n**css-loader가 필요 없다.**\n\n- css파일을 생성하지 않기에 webpack에서 css-loader가 필요 없다.\n\n<br />\n\n#### 런타임 오버헤드가 발생할 수 있다.\n\n- 런타임에서 동적으로 스타일을 생성하기에 스타일이 수시로 변경된다면...\n- ex) 스크롤, 드래그 앤 드랍 관련 복잡한 에니메이션\n\n<br />\n\n[**styled-components 과 emotion의 차이를 알고 싶다면?**](./styled-components-vs-emotion)\n\n---\n\n## **zero-runtime**\n\n런타임에 css를 생성하지않으면서 **페이지를 더 빨리 로드할 수 있다.**\nJS 번들에서 styles코드를 모두 실행되어야 페이지가 로드된다.\n\n![](https://images.velog.io/images/bepyan/post/a45cf494-a87a-4b4d-97d0-bbc857c36d0d/image.png)\n\nruntime에서 스타일이 생성되지 않는다.\n\n- props 변화에 따른 동적인 스타일은 css 변수를 통해 적용한다.\n\n<br />\n\n빌드 타임에 css를 생성해야기에 webpack 설정을 해야 한다.\n\n- React CRA을 사용한다면 eject해서 webpack 설정해야 하는데 굉장히 번거롭다.\n- runtime에서 css polyfill를 사용할 수 없어 브라우저 버전 이슈가 있을 수 있다.\n\n<br />\n\n**첫 load는 빠르지만, 첫 paint는 느릴 수 있다.**\n\n![](https://images.velog.io/images/bepyan/post/2f0e8b75-f2f9-43b0-93af-671bdeef3cb3/image.png)\n\ncss styles까지 모두 로드가 되어야 첫 paint를 시작된다.\n반면 runtime에서는 style를 로드하면서 첫 paint를 시작할 수 있다. ( 로딩화면 )\n\n<br />\n\n대표적인 라이브러리\n\n- [linaria](https://linaria.dev/)\n  - styled-component 문법 그대로 사용해서 러닝커브가 없을 것 같다.\n  - [styled-components와 속도 비교](https://pustelto.com/blog/css-vs-css-in-js-perf/)\n  - mini-css-extract-plugin에 의해 critical css를 판단할 수 없는 경우 linaria의 collect를 사용가능하다.\n- [vanilla-extract](https://vanilla-extract.style/)\n  - 사실상 typescript로 css를 작성하는 라이브러리. (`.css.ts`)\n  - [css-module](https://github.com/css-modules/css-modules)와 거의 흡사하다.\n  - tagged template literals를 지원하지 않는다.\n  - 현재 굉장히 높은 만족도와 관심을 받고 있다.\n\n<br />\n\n### critical CSS\n\n- 초기 화면에서 필요한 CSS이다.\n- critical CSS 추출과 runtime CSS 생성은 trade-off 관계를 갖고 있다.\n- SSR에서 중요한 쟁점이다. 사전에 CSS 추출을 할 것인가?\n\n---\n\n## **near-zero-runtime** (stitches)\n\n> [**stitches**](https://stitches.dev/)\n>\n> - SSR 환경에서도 잘 동작이 되도록 세팅이 되었다.\n> - **runtime overhead와 zero-runtime의 제약을 해결 ⇒ 빠르다** > [benchmarks](https://stitches.dev/docs/benchmarks)\n\n<br />\n\n런타임에서 각각의 CSS 프로퍼티가 Atomic CSS처럼 적용된다.\n\n- 반복되는 style을 atomics class로 변환하여 class를 재사용한다.\n- 불필요한 런타임에서의 props interpolations를 줄인다.\n\n```jsx\nconst StitchesButton1 = styled('button', {\n  color: 'red',\n  fontSize: 24,\n});\n\nconst StitchesButton2 = styled('button', {\n  color: 'red',\n  fontSize: 24,\n});\n```\n\n![](https://images.velog.io/images/bepyan/post/763654d2-4d56-4ab6-9999-ab5f270611d2/image.png)\n\n하지만 style 순서가 바뀌면 재사용할 수 없다.\n\n```jsx\nconst StitchesButton2 = styled('button', {\n  fontSize: 24,\n  color: 'red',\n});\n```\n\n[참고](https://github.com/mui-org/material-ui/issues/22342#issuecomment-679468200)\n\n<br />\n\nemotion과 같이 [CSSStylesSheet.insertRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule) 을 사용하여 [CSSOM](https://dkmqflx.github.io/frontend/2020/09/14/jscssom/)에 직접 삽입한다.\n\n사전에 정의한 [variants](https://stitches.dev/docs/variants)에 의해서 runtime 스타일링이 진행된다.\n\n- 공식문서가 굉장히 친절하고 친절하게 되어 있어서\n\n최고의 개발경험 제공\n\n- 사전에 정의한 [테마 변수](https://stitches.dev/docs/tokens), variants 자동완성 제공\n\n그리고 한계점...\n\n- css style extraction이 되지 않는다.\n- tagged template literals를 지원하지 않는다.\n  Object syntax을 사용하는 이유는 keep the bundle size to a minimum이라고 한다.\n\n### Atomic CSS\n\n- 필요한 수치를 입력을 해두면 필요한 CSS를 자동으로 생성을 해두는 주문형(on-demand) 패러다임\n- 대표적인 라이브러리는 [tailwindcss](https://tailwindcss.com/)\n- 중복된 style 코드를 atomic한 클래스로 묶음으로 style sheet 사이즈를 줄인다.\n  - [Facebook에서 Atomic CSS 도입으로 style sheet사이즈를 80% 줄인 사례](https://engineering.fb.com/2020/05/08/web/facebook-redesign/)\n\n---\n\n## 맺으면서\n\n### CSS-in-JS 사용에 고려할 사항\n\n- runtime overhead가 발생할 될 서비스인가?\n  - 없다면 기존 runtime CSS-in-JS를 써도 전혀 문제가 없을 것이다.\n- 직접 스타일을 작성하는가? 아니면 CSS 소스를 사용하는가?\n  - tagged template literals를 지원하지 않는다면 CSS 소스를 옮기기 굉장히 불편할 것이다.\n  - 따라서 stitches와 vanilla-extract의 도입은 CSS 변환의 수고스러움을 감수해야 할 것이다.\n- SSR인가 CSR인가?\n  - SSR를 설정하기 불편한 것이 있고 Critical CSS 최적화된 것이 있다.\n  - CSR는 runtime stylesheets, SSR는 static CSS에 이점을 갖는다. [참고](https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output#to-conclude)\n\n<br />\n\n멋진 개발팀들에서는 어떻게 라이브러리를 선택하는지 살펴보면 큰 도움이 될 것이다.\n\n- [material-ul가 emotion을 선택한 이유](https://github.com/mui-org/material-ui/issues/22342)\n- [shopify가 vanilla-extract를 선택한 이유](https://github.com/Shopify/foundational-design-system-proto/discussions/44#discussioncomment-888380)\n\n<br />\n\n개인적으로 생각했을 땐 결국 `개발 친화적 🌻`이 제일 중요한 이슈인 것 같다.\n\n- 개발팀에서 편하게 디자인 시스템을 구축할 수 있는가?\n- 개발 리소스 비용이 크기 때문...\n\n---\n\n### 프론트엔드의 흐름, build-time?\n\n현대 프론트엔드의 작업흐름이 build-time에서 최적화가 이뤄지고 있다.\n\n- 최신 CSS-in-JS 라이브러리들이 **build-time**(zero-runtime)으로 개발되고 있다.\n- **TypeScript**를 통해서 build-time 및 run-time 이전에 type 체크, code IntelliSense를 제공해준다.\n- **webpack, babel**를 통해서 다양한 브라우저에서 동작하는 앱을 만든다.\n- Next.js가 각광을 받으면서 CSR에서 **SSR**로 웹이 개발되어 가고 있다.\n- React, Vue를 넘어서 현재 **Svelte**가 많은 사람들의 주목을 받고 있다.\n  - run-time에서 Virtual DOM를 통해 비교하여 변경사항을 반영하는 것이 아닌,\n    build-time에서 어느 부분이 변경될지 파악하고 DOM을 업데이트하는 효율적인 명령 코드로 변환하여 사용한다.\n\n<br />\n\njavascript → typescript → build-time → compiler → **c++**\n\n![https://c.tenor.com/pl54bxCr1x8AAAAM/wow-omg.gif](https://c.tenor.com/pl54bxCr1x8AAAAM/wow-omg.gif)\n\n대학교 1학년 때부터 세뇌받듯이 들었던 말이 `프로그래밍 언어의 근본은 C++` 이다.\n~~javascript, python 같은 스크립트 언어는 감히 고개를 내밀지도 못했다.~~\n\n뛰어난 개발자들이 프론트엔드 생태계에 들어오면서 컴파일 시점에서의 최적화가 고도화 된 것 같다.\n\n카카오의 좋은 문화 중 하나가 `복잡할 수록 본질로 돌아가라`이다.\n그렇게 복잡한 웹 프론트엔드 생태계가 근본(?)을 되찾아가고 있지 않나 생각이 들었다.\n\n---\n\n**참고 자료**\n\n- [**https://so-so.dev/web/css-in-js-whats-the-defference/**](https://so-so.dev/web/css-in-js-whats-the-defference/)\n- [https://www.freecodecamp.org/news/the-tradeoffs-of-css-in-js-bee5cf926fdb/](https://www.freecodecamp.org/news/the-tradeoffs-of-css-in-js-bee5cf926fdb/)\n- [facebook 개발자가 말하는 기존 CSS의 문제 및 CSS-in-JS의 필요성 2014](https://speakerdeck.com/vjeux/react-css-in-js)\n- [https://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/](https://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/)\n- [https://velog.io/@velopert/create-your-own-design-system-with-storybook](https://velog.io/@velopert/create-your-own-design-system-with-storybook)\n- [https://brunch.co.kr/@kmongdev/17](https://brunch.co.kr/@kmongdev/17)\n- [https://darrengwon.tistory.com/1563](https://darrengwon.tistory.com/1563)\n- [https://github.com/andreipfeiffer/css-in-js/blob/main/README.md](https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#vanilla-extract)\n- [https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output](https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output)\n- [https://jbee.io/web/from-2021-to-2022/](https://jbee.io/web/from-2021-to-2022/)\n","slug":"2022/css-in-js","readingMinutes":11,"wordCount":901},"postFooterProps":{"prevPost":{"title":"2022 카카오 블라인드 공채 합격 후기","description":"2022 카카오 블라인드 공채 ✨ 카카오 본사 합격 후기 ✨","icon":"","image":"","tags":["회고","커리어"],"draft":false,"date":"2021-12-20","content":"\n## 들어가면서\n\n글을 재밋게 적어보려고 제가 친구 한명 데려와봤습니다. ⚡️ 스압 주의.\n\n🙋🏻 **`안녕하세요 코린이 에드에요`**\n\n<br />\n\n🙋🏻 **`우왓 ㅊㅋㅊㅋ 소감이 어때?`**\n\n참 힘들고... 긴 시간이었어... 스타트업을 다니면서 9월부터 11월까지 3개월 프로세스가 진행되었는데. 완전 고3 시절로 돌아간 느낌이야.. 다신 못할거 같애 .. 🥲\n\n내가 합격할 수 있었던 것은 **스터디를 진행했기 때문이야**. 대학동기 한명, 군대동기 한명이랑 같이 진행했는데 친구들에게 정말 고맙다고 박수를 주고 싶어 👏🏻👏🏻 군대동기랑 오랫만에 만나서 얘기를 하다가 뜻과 목표가 맞아서 `🦅 그럼 같이 스터디를 해볼래?`하면서 시작하게 되었어. 나중에 대학동기도 합류하게 되었고. 멋진 친구들과 함께하니까 포기를 안할 수 있었던거 같아!\n\n우린 100% 비대면으로 스터디를 진행했는데 큰 동기부여와 결속력을 갖기 위해서 엄청난 과금제를 도입했어. 현재 벌금이 10만원 넘게 모였고 곧 회식 때 쓰기로 했어. 지금 모두 취뽀했지만 스터디는 계속 진행하려고 하고 있어.\n\n<br />\n<br />\n\n---\n\n## 1차 코딩테스트\n\n🙋🏻 **`카카오 코딩테스트 어렵다는데 어땠어?`**\n\n갈수록 어려워지는 느낌이었는데 작년 코테보다 좀 쉽게 나온 것 같아.\n\n7문제 중 ~~5.5 솔~~ 5솔했어. ( 모든 테스트케이스를 통과해야지 점수가 카운팅이 된다 )\n\n어려운 그래프 알고리즘은 안나왔고 Dict 자료형, BFS, DFS를 잘 다루면 충분히 합격할 수 있는 수준이었던거 같아. 난 Javascript로 준비를 했다보니 우선순위큐, 순열 코드를 미리 준비했는데 다행이? 문제에 안쓰였어.\n\n<br />\n\n🙋🏻 **`고맙워 센세, 코테는 어떻게 준비했어?`**\n\n나는 [프로그래머스의 카카오 lv2-3 문제](https://programmers.co.kr/learn/challenges)를 모두 풀었고 백준에서는 내가 취약하다고 생각되는 분야의 골드 2-5 문제를 풀었어. 백준 문제는 [여기 문제집](https://github.com/tony9402/baekjoon)을 참고했어. 백준에서 javascript를 쓰기 좀 번거로웠는데 좀 정리해봤어. 필요하면 [여기 코드](https://github.com/Egolper/beginners-tech-interview/blob/main/algorithm/baekjoon_nodejs.js)를 참고하면 될거 같아.\n\n스터디에서는 같이 공부방향을 정하고 풀이법을 공유했어. 안 풀어오면 벌금을 때리고 ^^\n\n<br />\n<br />\n\n---\n\n## 2차 코딩테스트\n\n🙋🏻 **`카카오는 코테 2번하던데? 뭐가 달라?`**\n\n평소에 생각한 코딩테스트와 완전 달라. REST API 통신을 통해서 높은 점수를 획득해야해! 뭔가 인공지능 모델을 학습시키는 느낌과 뭔가 비슷한거 같아.\n\n반드시 [**프로그래머스의 기출문제**](https://programmers.co.kr/skill_check_assignments/67)를 풀어 보고 [**문제해설**](https://tech.kakao.com/2021/02/16/2021-kakao-recruitment-round-2/)도 참고하길 바래. 문제가 실제 상황과 비슷하게 주어지는데 어뷰징이라는 상황도 있어. 정답이 있는 것이 아닌 높은 점수를 획득하는 것이 목표이기에 **문제의 제약상황을 잘 캐치해야되.**\n\n자유롭게 IDE를 사용할 수 있어서 미리 사용할 통신모듈을 고르고 코드를 작성해두길 바래. 나도 스터디를 통해서 이런 정보를 알게되었고 코테 때서야 통신모듈을 끄적여야하는 불상사가 발생하지 않았어.\n\n5시간 동안이었나 코딩해야하는데 시간이 빨리 가더라. 랭킹보드를 실시간으로 조회할 수 있는데 종료 30분 전에 마감이 되었던거 같아. 난 4번 정도? 나의 위치를 확인했는데 300등이었나.. 고수분들이 참 많드라 허허..\n\n아 그리고 2차 코딩테스트에서 CS문제도 풀게 되!\n🙋🏻 **`Computer Science 문제?`**\n맞아, 객관식 8문제 주관식(단답식) 2문제가 나왔어. 알고리즘 전에 풀었는가 후에 풀었는가 기억은 잘 안나는데 검색은 허용이 안돼.\n\n자료구조 문제가 좀더 많이 나온거 같고 CS를 어떻게 응용을 할까에 대한 문제야. 뭔가 수능 지문이랑 비슷했던거 같아. 제대로 알고 있지않는 한 찍어야 했고 그래서 나는 3-4문제 맞춘 것 같아 ㅎㅎ... 문제가 생각보다 어려워서 당시 멘탈이 탈탈 날라갔어.\n\n<br />\n\n🙋🏻 **`높은 점수를 얻는 꿀팁이 있어?`**\n\n난 고득점을 한게 아니라 뭐라 말해주긴 그런데.. 문제 특성상 값을 튜닝해서 정답과 가장 근사하게 계산해내야 해. 그래서 나는 여러개 터미널를 켜서 다양한 값을 통신해서 점수를 최적화했어.\n\n지문이 상당히? 길기에 차분하고 꼼꼼하게 읽어 보길바래. **사소한 제약사항을 놓치면 끔찍한 삽질을 반복할 수 있어.** 난 서버에 저장되는 값의 제한 범위를 놓여서 고생했어. 이렇게 저렇게 코드를 짜보는데 왜 점수가 그대로일까? 했는데 알고보니 내가 제출한 값이 제한 범위를 초과해서 서버에 적용이 안된 것이었어. 내 친구 중에서도 이와 같이 마음아픈 사연이 있었어 🥲\n\n<br />\n<br />\n\n---\n\n## 1차 인터뷰 ( feat. 직무역량 )\n\n🙋🏻 **`와우 이제 1차 면접인가?!`**\n\n맞아 그렇게 1지망으로 적었던 카카오 프로그래밍(본사)에 합격했어. CS문제 때문에 많이 쫄렸는데 다행이었어 🥲\n\n여기부터 각 계열사에 따라서 진행 절차가 달라져. 나 같은 경우 서류를 별도로 제출해야했고 1시간 비대면 면접이 예정되었어. `미리만나는 카카오(미만카)` 세션도 준비 되어 있어서 어떠한 직무가 어떤 일을 하는지 들어볼 수 있어.\n\n당시 미만카에서 내가 기록한 정보로는 아래와 같아.\n\n```\n프로그래밍 언어보다는 프로그래밍 공통적인 부분에 대해서 인터뷰가 진행될 예정이다.\n일하는 방법 O  직무 경험 X\n```\n\n<br />\n\n🙋🏻 **`어떻게 준비를 했어?!`**\n\n스터디의 빛이 바래는 순간이야! ✨ **모의면접**을 진짜 많이 진행했어.\n2-3일 텀으로 개인적으로 공부하고 받을 만한 질문을 스터디 깃허브 레포지토리에 정리했어. 이후 화상으로 2 대 1 면접을 진행하는데 30분 가량 질문을 하고 이에 피드벡을 했어. 막상 설명하려하니 말이 잘 안나오는 부분이 많았는데 사실 이는 제대로 이해하지 못했다는 증거인거 같애. 덕분에 나의 부족함을 좀 더 알고 대비할 수 있었던거 같아. 확실히 처음 때보다 실력이 많이 늘은게 체감이 되더라!\n\n**스스로 공부하다 보면 우물의 개구리**가 될 수 있는데 ~~여전히 그렇지만~~ 혼자서는 접하기 힘들었던 지식를 스터디를 통해서 얻을 수 있었던거 같아 ( 물론 좀 TMI 지식일 수 있긴한데... 예를 들면 HTTP3, 샤딩, 함수형 프로그래밍의 Functor, Monad... ) 그리고 참고하면 좋을 링크를 주고 받았던게 학습에 도움이 되었던거 같아.\n\n**면접관의 관점으로 면접을 바라볼 수 있어서 좋았어.** 장황하게 설명하는게 진짜 별로라고 생각이 들었거든. 에매하게 아는건 깔끔하게 모른다고 하고 아는건 핵심을 잘 전달해주는게 좋은거 같아. 그려면서 면접 전략도 세우게 되었는데, 바로 `키워드` 바탕으로 대답을 준비하는거야. 설명이 조금 부실하더라도 핵심 키워드가 면접관 귀에 들어가면 적어도 평타이상의 답변이 될거 같다고 생각했어.\n\n우리가 스터디를 진행하면서 나름대로 정리해둔 [**📚면접준비 핸드북**](https://github.com/Egolper/beginners-tech-interview)가 있어! (아직 퀄리티가 높진 않아.. 계속 정리해보고 있어). 면접 준비하는데 도움이 되었으면 좋겠어. 우리가 참고한 다른 스터디 링크도 있어서 참고하길 바래!\n\n뭔가 공부하면 할수록 공부해야할게 늘어나는 느낌이야... 스스로 결단을 해야할거 같아. 나는 딱 여기까지만 설명을 할거다 하는 마인드.\n\n그렇게 2주의 시간이 흐르고 면접을 보게 되었어.\n\n<br />\n\n🙋🏻 **`오 드디어 면접! 내가 제일 궁금했던 거야! 면접 때 뭐 물어봤어?`**\n\n정확히 어떤 질문을 했는진 말해줄 순 없고 어떻게 진행되었는지 말해줄게.\n\n난 무난해보이는? 갈색 후리스 자켓을 입고 면접을 진행했어 ( 츄리닝 바지 입은건 안비밀 ). 면접관은 2분이셨고 긴장하지 말라고 잡담 몇마디 주고 받고 시작했어. 주로 큰 주제의 질문을 던져주고 **`🎅🏻 아는대로 말해보세요우!`** 하는 느낌이었어. 그 이후로부터 지옥의 꼬리 질문🔥이 이어가는 형식이야.\n\n내가 생각해봤을 때 면접관이 원하는 사람은 단순히 지식을 아는 것이 아니라 공학적인 사고를 할 수 있는 사람인 것 같아. 그래서 **이 개념이 어떻게 다른 개념들과 연관이 되고 어떤 trade-off 관계가 있는지** 알아야해.\n모든 지식을 아는 것을 기대하기 보단 기술을 제대로 이해하고 응용할 수 있음을 기대하는거 같아. 그래서 **애매하게 아는 것에 대해서 아는척 포장하지 말고, 잘 모른다고 인정하고 내가 잘 아는 것을 설명해가는 흐름**으로 면접을 유도하는게 좋을거 같아. 계속 내가 잘 모르는 것을 물어본다면 어쩔 수 없지 ㅠㅠ 더 공부해서 다음 기회에 도전하는 걸로.. 나도 2-3 질문에 어떻게든 대답하려하기보단 그냥 잘 모르겠습니다 대답하고 넘어간 것 같아. 기술면접준비가 참 어려운거 같아 🥲\n\n**2차 코테에서 작성한 코드**에 대해서도 질의가 진행되었어. 다행이 난 스터디를 통해서 서로 코드에 대해서 질의를 했어서 당황하지 않고 대답할 수 있었어. 본인이 작성했는지, 어떤 흐름을 가지고 코드를 작성했는지 확인하는 느낌이야. 코드 제출전에 어느정도 리팩토링을 하면 좋을 것 같아.\n\n나중에 알게되었는데 **면접진행방식은 면접관에 따라 천차만별이야.** 어떤분은 종이에 알고리즘을 작성했고 어떤분은 오로지 기술질문만 받았고 어떤 분은 자기소개 없이 면접이 진행되고 어떤 분은 프로그래밍 언어에 대해서도 물어보셨다고 해. 나는 라이브코딩을 한게 특징? 이라고 할 수 있어. ~~오히려 좋아~~\n\n아 그리고 끝날 때 보통 2개 정도 질문을 받아. 그거는 날를 평가하기 보단 정말 나에게 도움을 주기 위한 세션이라고 느꼈어. 그래서 나를 어필할 질문을 하는게 아니라 내가 고민을 하는 것, 궁금한 것 편하게 물어봐도 될거 같아.\n\n<br />\n\n🙋🏻 **`난 전공자가 아닌데 괜찮을까?`**\n\n난 전공자임에도 불구하고 처음부터 준비해야했어. 원래 학교 공부는 종강하는 순간 사라지는거잔어 ㅎㅎ.. 물론 면접준비하면서 학창시절 공부했던 것들이 조금씩 생각 나더라. 아 그분에게서 그걸 배웠었지... `🙋🏻 너 아직 학생이잔아..` ~~학교 가면 쥬라기 화석 취급 받아..~~ 암튼 못할게 없다고 생각해! 앞에 인형에게 혹은 거울앞에서 설명할 수 있으면 합격할 수 있을거야!\n\n<br />\n<br />\n\n---\n\n## 2차 인터뷰 ( feat. 조직적합도와 잠재력 )\n\n🙋🏻 **`이제야 마지막 관문.. 산넘어 산이네.. 2차 면접은 어땟어??`**\n\n비대면으로 40분 봤고 2분 면접관이 있어. 면접관들이 임원이여서 그런지 1차 면접관분들보다 나이가 있으셨고 질문을 던질 때 포스가 장난아니였던거 같아.. ~~짬에서 나오는 바이브 🎶~~\n\n자기소개하고 기본적으로 서류에 작성한 내용에서 면접관들이 갖는 의문들에 대해서 질문을 해.\n**면접관들은 자신이 납득이 될 때까지 (의문이 해소가 될 때까지) 꼬리질문이 들어오는 거 같아.** 뭔가 압박면접인 느낌이 들기도 했어. 구체적인 상황을 주어주면서 면접자의 생각, 행동, 선택을 유도하는 것 같아. 어설프게 답변을 포장하기보단 역시 솔직하게 내가 느끼고 판단하는 것을 대답하는게 정말 최선인거 같아..\n\n단골로 물어보는게 본인의 장단점, 왜 개발을 하게되었는지, 맞닿았던 어려움에서 어떤 노력을 해서 해결을 했는지 그런 것들이 있는데 말그대로 묻기 보다는 면접 상황에서 유연하게, 더 구체적인 질문이 들어왔던거 같아. 내가 그동안 어떻게 협업을 했는지, 개발자로서 어떤 매력이 있는지 꼭 고민하길 바래.\n\n면접 때 좀 풀만한 썰들이 있는데 ..,.^& () !@%\n\n<br />\n\n🙋🏻 **`와 내가 면접을 보는거 같네 ㅋㅋㅋ 혹시 준비하는 꿀팁이 있을까?`**\n\n내가 개발을 시작한 본질을 파악하면 좋아! 너무 어려운 말인데 정말 솔직하게 내가 왜 개발을 시작했고 뭘 하고 싶은지 정리해야 할거 같아.\n\n**Resume를 작성해보는 것**이 도움이 될거 같아. 이력서를 당장 내는 것은 아니지만 내가 뭘 했고 어떤 것을 경험했는지 사색을 할 수 있는 것 같아. [유투브](https://youtu.be/fv5pIa_l7ns)에서 듣기로 주기를 갖고 이력서를 관리하는 것이 좋다고 하더라구?\n스터디 친구들과 함께 작성을 해봤는데 [이분의 이력서](https://wonny.space/writing/work/engineer-resume)를 참고하면 정말 도움이 될거야!\n\n**답변을 외우는 연습말고 설명하는 연습을 하자.** 쇼미에서 참가자들이 괜히 가사를 절는게 아니야. 진짜 머릿속이 새하얗게 된다. [레전드 면접썰.](https://redtea.kr/fun/52391?id=fun&no=52391) 인성면접에는 면접관을 설득하는 세션인 느낌이 든다. ~~저를 꼽으셔야 하옵니다 ㅠ(간절)ㅠ~~ 거울을 보고 자신감 있게, 홈쇼핑에서 나를 판매하듯이. 면접전에 혼자서 Meets를 틀어서 이렇게 저렇게 설명하는 연습을 했다. 정말 도움이 되었던거 같아.\n\n공채 특성상 본인이 관심별로 없는 직무, 팀을 배정 받을 가능성이 있어. 그래서 어떤 일을 하게 되도 정말 열심히 구를 수 있다, 팀에 기여하는 것에 큰 동기를 얻는다, 해당 회사에 입사하는 것이 간절하다... 그런 마인드셋을 가지고 면접을 가는게 좋을거 같아. 근데 어디까지나 본인 생각을 솔직하게 말하는게 최고야.\n\n그리고 지원하는 회사가 원하는 인재상을 꼭 분석해보길 바래! [카카오의 문화](https://careers.kakao.com/kakaolife)\n\n<br />\n<br />\n\n---\n\n## 그리고, 합격 😭\n\n![](https://images.velog.io/images/bepyan/post/ea72dea1-26bf-47e4-981e-231bc9089112/image.png)\n\n🙋🏻 **`가슴이 웅장해지는 구나..`**\n\n1-2일 정도 지연되었는데 그동안 정말 마음 쪼리고 기다렸던거 같아..\n집에서 밥먹다가 메일 알림이 와서 바로 노트북앞으로 뛰처 갔어 ㅎㅎ 그리고 축제가 열렸지 🎉\n\n확실히 네임드가 네임드인지,, 주변으로부터 정말 많이 축하 받았어 🥰\n회사 이름만 들어도 자동반사 축하~!\n\n아 근데 참고로 제일 많이 들은 말이\n\n🧔🏻‍♂️ **`오 축하해~ 카카오 주식 싸게 살 수 없어?`**\n\n🙋🏻 **`나도 주식 정보 좀...`**\n\n🙋 **`...`**\n\n고마워, 마지막으로 한마디를 할게.\n\n![](https://images.velog.io/images/bepyan/post/e22b8f12-e25d-4490-a9ff-5790910d27d2/KakaoTalk_Photo_2021-12-20-01-37-48.jpeg)\n\n![](https://images.velog.io/images/bepyan/post/c518285d-a8d0-42e1-bbea-297e5a539c99/KakaoTalk_Photo_2021-12-20-01-37-55.jpeg)\n\n춘식이는 귀여워 💜\n","slug":"retrospect/2021-pass-kakao","readingMinutes":22,"wordCount":1551,"serizeSlug":"retrospect"},"nextPost":{"title":"Markdown Template Example","description":"마크다운 문법 사용 템플릿","tags":["markdown"],"date":"2022-11-17","content":"\n# h1 Heading\n\n## h2 Heading\n\n### h3 Heading\n\n### **h3 Bold Heading**\n\n#### h4 Heading\n\n\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n\nline break with '&nbsp;&nbsp;&nbsp;'   \nline break with `<br />` <br />\n\n---\n\n## Emphasis\n\n**This is bold text**\n\n_This is italic text_\n\n~~Strikethrough~~\n\n## Blockquotes\n\n> Blockquotes can also be nested...\n>\n> > ...by using additional greater-than signs right next to each other...\n> >\n> > > ...or with spaces between arrows.\n\n## Lists\n\nUnordered\n\n- Create a list by starting a line with `-` or `*`\n- Sub-lists are made by indenting 2 spaces:\n  - Marker character change forces new list start:\n    - Ac tristique libero volutpat at\n    * Facilisis in pretium nisl aliquet\n- Very easy!\n\nOrdered\n\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n\n4. You can use sequential numbers...\n5. ...or keep all the numbers as `1.`\n\nStart numbering with offset:\n\n57. foo\n1. bar\n\n## Code\n\nInline `code`\n\nBlock code\n\n```\nSample text here...\n```\n\nSyntax highlighting\n\n```js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n\nSyntax highlighting with file name, highlight line\n\n```ts:cores.ts {2}\nexport const cn = (classNames: ...any) => {\n    return classNames.filter(Boolean).join(' ');\n}\n```\n\n## Tables\n\n| Option | Description                                                               |\n| ------ | ------------------------------------------------------------------------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default.    |\n| ext    | extension to be used for dest files.                                      |\n\nRight aligned columns\n\n| Option |                                                               Description |\n| -----: | ------------------------------------------------------------------------: |\n|   data | path to data files to supply the data that will be passed into templates. |\n| engine |    engine to be used for processing templates. Handlebars is the default. |\n|    ext |                                      extension to be used for dest files. |\n\n## Links\n\n[link text](http://bepyan.github.io/)\n\n[**bold link text**](http://bepyan.github.io/)\n\n[`code link text`](http://bepyan.github.io/)\n\nAutoconverted link https://github.com/bepyan\n\n## Images\n\n![Minion](https://octodex.github.com/images/minion.png)\n\nHTML `<Img />` tag\n\n<img src=\"https://octodex.github.com/images/stormtroopocat.jpg\" alt=\"Stormtroopocat\" width={300} />\n","slug":"2022/example","readingMinutes":3,"wordCount":411}},"serize":null,"slug":"2022/css-in-js","compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    span: \"span\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    br: \"br\",\n    hr: \"hr\",\n    img: \"img\",\n    code: \"code\",\n    h3: \"h3\",\n    blockquote: \"blockquote\",\n    div: \"div\",\n    pre: \"pre\",\n    button: \"button\",\n    svg: \"svg\",\n    path: \"path\",\n    del: \"del\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.h2, {\n      id: \"들어가면서\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#들어가면서\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"들어가면서\"]\n    }), \"\\n\", _jsxs(_components.h4, {\n      id: \"이-글의-목적\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#이-글의-목적\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"이 글의 목적\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"다양한 CSS-in-JS 라이브러리가 있는데 이들은 어떤 차이점이 있을까?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"더 나아가 어떤 상황에서 어떤 라이브러리를 사용하면 좋을까?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.h4, {\n      id: \"css-in-js가-대세인-이유\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#css-in-js가-대세인-이유\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"CSS-in-JS가 대세인 이유\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"중복되지 않는 class 이름을 고려할 필요가 없다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"JS 코드와 CSS가 상태 값을 공유할 수 있다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"컴포넌트와 스타일 코드를 쉽게 오갈 수 있다.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"자동으로 \", _jsx(_components.a, {\n          href: \"https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"vendor-prefix\"\n        }), \"을 붙여준다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"⇒ \", _jsx(_components.strong, {\n        children: \"개발 친화적 🌻  DX ( Developer Experience )\"\n      })]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"2020, 2021에 들어서서 많은 CSS-in-JS 라이브러리가 등장했다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://2021.stateofcss.com/en-US/technologies/css-in-js\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://2021.stateofcss.com/en-US/technologies/css-in-js\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://risingstars.js.org/2021/en#section-css-in-js\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://risingstars.js.org/2021/en#section-css-in-js\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"css-in-js의 동작 방식은 크게 \", _jsx(_components.strong, {\n        children: \"runtime\"\n      }), \", \", _jsx(_components.strong, {\n        children: \"zero-runtime\"\n      }), \" 으로 나눠진다.\", _jsx(_components.br, {}), \"\\n\", \"runtime이 반드시 성능저하를 발생시키진 않고 프로젝트 규모와 상황에 따라 달라질 수 있음을 염두하고 살펴보도록 하자.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"runtime\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#runtime\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.strong, {\n        children: \"runtime\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"javascript runtime에서 필요한 CSS를 동적으로 만들어 적용한다.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"대표적으로 잘 알려진 \", _jsx(_components.a, {\n        href: \"https://styled-components.com/\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"styled-component\"\n      }), \", \", _jsx(_components.a, {\n        href: \"https://emotion.sh/docs/introduction\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"emotion\"\n      }), \" 이 있다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"아래 styled-components로 만든 예시를 살펴보자.\", _jsx(_components.br, {}), \"\\n\", \"버튼의 상태가 바뀌면서 style 코드가 동적으로 생성되어 삽입되는 것을 볼 수 있다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/7d5ee0a5-d698-4615-a592-15847466cacb/%E1%84%92%E1%85%AA%E1%84%86%E1%85%A7%E1%86%AB-%E1%84%80%E1%85%B5%E1%84%85%E1%85%A9%E1%86%A8-2022-01-25-%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB-12.42.01%20(1).gif\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"개발모드에서는 \", _jsx(_components.code, {\n            children: \"<style>\"\n          }), \" 태그에 style을 추가하는 방식을 사용한다.\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"디버깅에 이점이 있다고 한다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"배포 모드에서는 stylesSheet을 \", _jsx(_components.a, {\n            href: \"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"CSSStylesSheet.insertRule\"\n          }), \" 통해 바로\", _jsx(_components.a, {\n            href: \"https://dkmqflx.github.io/frontend/2020/09/14/jscssom/\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"CSSOM\"\n          }), \"에 주입한다.\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"성능상의 이짐이 있다고 한다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"css-loader가 필요 없다.\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"css파일을 생성하지 않기에 webpack에서 css-loader가 필요 없다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.h4, {\n      id: \"런타임-오버헤드가-발생할-수-있다\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#런타임-오버헤드가-발생할-수-있다\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"런타임 오버헤드가 발생할 수 있다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"런타임에서 동적으로 스타일을 생성하기에 스타일이 수시로 변경된다면...\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ex) 스크롤, 드래그 앤 드랍 관련 복잡한 에니메이션\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"./styled-components-vs-emotion\",\n        children: _jsx(_components.strong, {\n          children: \"styled-components 과 emotion의 차이를 알고 싶다면?\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"zero-runtime\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#zero-runtime\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.strong, {\n        children: \"zero-runtime\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"런타임에 css를 생성하지않으면서 \", _jsx(_components.strong, {\n        children: \"페이지를 더 빨리 로드할 수 있다.\"\n      }), _jsx(_components.br, {}), \"\\n\", \"JS 번들에서 styles코드를 모두 실행되어야 페이지가 로드된다.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/a45cf494-a87a-4b4d-97d0-bbc857c36d0d/image.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"runtime에서 스타일이 생성되지 않는다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"props 변화에 따른 동적인 스타일은 css 변수를 통해 적용한다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"빌드 타임에 css를 생성해야기에 webpack 설정을 해야 한다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"React CRA을 사용한다면 eject해서 webpack 설정해야 하는데 굉장히 번거롭다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"runtime에서 css polyfill를 사용할 수 없어 브라우저 버전 이슈가 있을 수 있다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"첫 load는 빠르지만, 첫 paint는 느릴 수 있다.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/2f0e8b75-f2f9-43b0-93af-671bdeef3cb3/image.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"css styles까지 모두 로드가 되어야 첫 paint를 시작된다.\", _jsx(_components.br, {}), \"\\n\", \"반면 runtime에서는 style를 로드하면서 첫 paint를 시작할 수 있다. ( 로딩화면 )\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"대표적인 라이브러리\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://linaria.dev/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"linaria\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"styled-component 문법 그대로 사용해서 러닝커브가 없을 것 같다.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.a, {\n              href: \"https://pustelto.com/blog/css-vs-css-in-js-perf/\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"styled-components와 속도 비교\"\n            })\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"mini-css-extract-plugin에 의해 critical css를 판단할 수 없는 경우 linaria의 collect를 사용가능하다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://vanilla-extract.style/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"vanilla-extract\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"사실상 typescript로 css를 작성하는 라이브러리. (\", _jsx(_components.code, {\n              children: \".css.ts\"\n            }), \")\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.a, {\n              href: \"https://github.com/css-modules/css-modules\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"css-module\"\n            }), \"와 거의 흡사하다.\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"tagged template literals를 지원하지 않는다.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"현재 굉장히 높은 만족도와 관심을 받고 있다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"critical-css\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#critical-css\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"critical CSS\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"초기 화면에서 필요한 CSS이다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"critical CSS 추출과 runtime CSS 생성은 trade-off 관계를 갖고 있다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"SSR에서 중요한 쟁점이다. 사전에 CSS 추출을 할 것인가?\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"near-zero-runtime-stitches\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#near-zero-runtime-stitches\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), _jsx(_components.strong, {\n        children: \"near-zero-runtime\"\n      }), \" (stitches)\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://stitches.dev/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: _jsx(_components.strong, {\n            children: \"stitches\"\n          })\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"SSR 환경에서도 잘 동작이 되도록 세팅이 되었다.\"\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"runtime overhead와 zero-runtime의 제약을 해결 ⇒ 빠르다\"\n          }), \" > \", _jsx(_components.a, {\n            href: \"https://stitches.dev/docs/benchmarks\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"benchmarks\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"런타임에서 각각의 CSS 프로퍼티가 Atomic CSS처럼 적용된다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"반복되는 style을 atomics class로 변환하여 class를 재사용한다.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"불필요한 런타임에서의 props interpolations를 줄인다.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rehype-code-wrap\",\n      children: [_jsx(_components.pre, {\n        className: \"language-jsx\",\n        children: _jsxs(_components.code, {\n          className: \"language-jsx code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"const\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"StitchesButton1\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token function\",\n              children: \"styled\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"(\"\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'button'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"color\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'red'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"fontSize\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token number\",\n              children: \"24\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \")\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \";\"\n            }), \"\\n\"]\n          }), _jsx(_components.span, {\n            className: \"code-line\",\n            children: \"\\n\"\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"const\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"StitchesButton2\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token function\",\n              children: \"styled\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"(\"\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'button'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"color\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'red'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"fontSize\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token number\",\n              children: \"24\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \")\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \";\"\n            }), \"\\n\"]\n          })]\n        })\n      }), _jsxs(_components.button, {\n        className: \"rehype-code-wrap--copy\",\n        children: [_jsxs(_components.svg, {\n          className: \"rehype-code-wrap--copy-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: [_jsx(_components.path, {\n            d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n          }), _jsx(_components.path, {\n            d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n          })]\n        }), _jsx(_components.svg, {\n          className: \"rehype-code-wrap--check-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: _jsx(_components.path, {\n            d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://images.velog.io/images/bepyan/post/763654d2-4d56-4ab6-9999-ab5f270611d2/image.png\",\n        alt: \"\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"하지만 style 순서가 바뀌면 재사용할 수 없다.\"\n    }), \"\\n\", _jsxs(_components.div, {\n      className: \"rehype-code-wrap\",\n      children: [_jsx(_components.pre, {\n        className: \"language-jsx\",\n        children: _jsxs(_components.code, {\n          className: \"language-jsx code-highlight\",\n          children: [_jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token keyword\",\n              children: \"const\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token maybe-class-name\",\n              children: \"StitchesButton2\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token operator\",\n              children: \"=\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token function\",\n              children: \"styled\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"(\"\n            }), _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'button'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"{\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"fontSize\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token number\",\n              children: \"24\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [\"  \", _jsx(_components.span, {\n              className: \"token literal-property property\",\n              children: \"color\"\n            }), _jsx(_components.span, {\n              className: \"token operator\",\n              children: \":\"\n            }), \" \", _jsx(_components.span, {\n              className: \"token string\",\n              children: \"'red'\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \",\"\n            }), \"\\n\"]\n          }), _jsxs(_components.span, {\n            className: \"code-line\",\n            children: [_jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \"}\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \")\"\n            }), _jsx(_components.span, {\n              className: \"token punctuation\",\n              children: \";\"\n            }), \"\\n\"]\n          })]\n        })\n      }), _jsxs(_components.button, {\n        className: \"rehype-code-wrap--copy\",\n        children: [_jsxs(_components.svg, {\n          className: \"rehype-code-wrap--copy-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: [_jsx(_components.path, {\n            d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n          }), _jsx(_components.path, {\n            d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n          })]\n        }), _jsx(_components.svg, {\n          className: \"rehype-code-wrap--check-icon\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          height: \"16\",\n          width: \"16\",\n          viewBox: \"0 0 16 16\",\n          fill: \"currentColor\",\n          children: _jsx(_components.path, {\n            d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n          })\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/mui-org/material-ui/issues/22342#issuecomment-679468200\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"참고\"\n      })\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"emotion과 같이 \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"CSSStylesSheet.insertRule\"\n      }), \" 을 사용하여 \", _jsx(_components.a, {\n        href: \"https://dkmqflx.github.io/frontend/2020/09/14/jscssom/\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"CSSOM\"\n      }), \"에 직접 삽입한다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"사전에 정의한 \", _jsx(_components.a, {\n        href: \"https://stitches.dev/docs/variants\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"variants\"\n      }), \"에 의해서 runtime 스타일링이 진행된다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"공식문서가 굉장히 친절하고 친절하게 되어 있어서\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"최고의 개발경험 제공\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"사전에 정의한 \", _jsx(_components.a, {\n          href: \"https://stitches.dev/docs/tokens\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"테마 변수\"\n        }), \", variants 자동완성 제공\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 한계점...\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"css style extraction이 되지 않는다.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"tagged template literals를 지원하지 않는다.\", _jsx(_components.br, {}), \"\\n\", \"Object syntax을 사용하는 이유는 keep the bundle size to a minimum이라고 한다.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"atomic-css\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#atomic-css\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Atomic CSS\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"필요한 수치를 입력을 해두면 필요한 CSS를 자동으로 생성을 해두는 주문형(on-demand) 패러다임\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"대표적인 라이브러리는 \", _jsx(_components.a, {\n          href: \"https://tailwindcss.com/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"tailwindcss\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"중복된 style 코드를 atomic한 클래스로 묶음으로 style sheet 사이즈를 줄인다.\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: _jsx(_components.a, {\n              href: \"https://engineering.fb.com/2020/05/08/web/facebook-redesign/\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"Facebook에서 Atomic CSS 도입으로 style sheet사이즈를 80% 줄인 사례\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h2, {\n      id: \"맺으면서\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#맺으면서\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"맺으면서\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"css-in-js-사용에-고려할-사항\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#css-in-js-사용에-고려할-사항\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"CSS-in-JS 사용에 고려할 사항\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"runtime overhead가 발생할 될 서비스인가?\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"없다면 기존 runtime CSS-in-JS를 써도 전혀 문제가 없을 것이다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"직접 스타일을 작성하는가? 아니면 CSS 소스를 사용하는가?\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"tagged template literals를 지원하지 않는다면 CSS 소스를 옮기기 굉장히 불편할 것이다.\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"따라서 stitches와 vanilla-extract의 도입은 CSS 변환의 수고스러움을 감수해야 할 것이다.\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"SSR인가 CSR인가?\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"SSR를 설정하기 불편한 것이 있고 Critical CSS 최적화된 것이 있다.\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"CSR는 runtime stylesheets, SSR는 static CSS에 이점을 갖는다. \", _jsx(_components.a, {\n              href: \"https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output#to-conclude\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"참고\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"멋진 개발팀들에서는 어떻게 라이브러리를 선택하는지 살펴보면 큰 도움이 될 것이다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/mui-org/material-ui/issues/22342\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"material-ul가 emotion을 선택한 이유\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/Shopify/foundational-design-system-proto/discussions/44#discussioncomment-888380\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"shopify가 vanilla-extract를 선택한 이유\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"개인적으로 생각했을 땐 결국 \", _jsx(_components.code, {\n        children: \"개발 친화적 🌻\"\n      }), \"이 제일 중요한 이슈인 것 같다.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"개발팀에서 편하게 디자인 시스템을 구축할 수 있는가?\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"개발 리소스 비용이 크기 때문...\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.h3, {\n      id: \"프론트엔드의-흐름-build-time\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#프론트엔드의-흐름-build-time\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"프론트엔드의 흐름, build-time?\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"현대 프론트엔드의 작업흐름이 build-time에서 최적화가 이뤄지고 있다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"최신 CSS-in-JS 라이브러리들이 \", _jsx(_components.strong, {\n          children: \"build-time\"\n        }), \"(zero-runtime)으로 개발되고 있다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"TypeScript\"\n        }), \"를 통해서 build-time 및 run-time 이전에 type 체크, code IntelliSense를 제공해준다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"webpack, babel\"\n        }), \"를 통해서 다양한 브라우저에서 동작하는 앱을 만든다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Next.js가 각광을 받으면서 CSR에서 \", _jsx(_components.strong, {\n          children: \"SSR\"\n        }), \"로 웹이 개발되어 가고 있다.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"React, Vue를 넘어서 현재 \", _jsx(_components.strong, {\n          children: \"Svelte\"\n        }), \"가 많은 사람들의 주목을 받고 있다.\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"run-time에서 Virtual DOM를 통해 비교하여 변경사항을 반영하는 것이 아닌,\", _jsx(_components.br, {}), \"\\n\", \"build-time에서 어느 부분이 변경될지 파악하고 DOM을 업데이트하는 효율적인 명령 코드로 변환하여 사용한다.\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"javascript → typescript → build-time → compiler → \", _jsx(_components.strong, {\n        children: \"c++\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://c.tenor.com/pl54bxCr1x8AAAAM/wow-omg.gif\",\n        alt: \"https://c.tenor.com/pl54bxCr1x8AAAAM/wow-omg.gif\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"대학교 1학년 때부터 세뇌받듯이 들었던 말이 \", _jsx(_components.code, {\n        children: \"프로그래밍 언어의 근본은 C++\"\n      }), \" 이다.\", _jsx(_components.br, {}), \"\\n\", _jsx(_components.del, {\n        children: \"javascript, python 같은 스크립트 언어는 감히 고개를 내밀지도 못했다.\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"뛰어난 개발자들이 프론트엔드 생태계에 들어오면서 컴파일 시점에서의 최적화가 고도화 된 것 같다.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"카카오의 좋은 문화 중 하나가 \", _jsx(_components.code, {\n        children: \"복잡할 수록 본질로 돌아가라\"\n      }), \"이다.\", _jsx(_components.br, {}), \"\\n\", \"그렇게 복잡한 웹 프론트엔드 생태계가 근본(?)을 되찾아가고 있지 않나 생각이 들었다.\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"참고 자료\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://so-so.dev/web/css-in-js-whats-the-defference/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: _jsx(_components.strong, {\n            children: \"https://so-so.dev/web/css-in-js-whats-the-defference/\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.freecodecamp.org/news/the-tradeoffs-of-css-in-js-bee5cf926fdb/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://www.freecodecamp.org/news/the-tradeoffs-of-css-in-js-bee5cf926fdb/\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://speakerdeck.com/vjeux/react-css-in-js\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"facebook 개발자가 말하는 기존 CSS의 문제 및 CSS-in-JS의 필요성 2014\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://ideveloper2.dev/blog/2019-05-05--thinking-about-emotion-js-vs-styled-component/\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://velog.io/@velopert/create-your-own-design-system-with-storybook\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://velog.io/@velopert/create-your-own-design-system-with-storybook\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://brunch.co.kr/@kmongdev/17\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://brunch.co.kr/@kmongdev/17\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://darrengwon.tistory.com/1563\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://darrengwon.tistory.com/1563\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/andreipfeiffer/css-in-js/blob/main/README.md#vanilla-extract\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://github.com/andreipfeiffer/css-in-js/blob/main/README.md\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://andreipfeiffer.dev/blog/2021/css-in-js-styles-output\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://jbee.io/web/from-2021-to-2022/\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"https://jbee.io/web/from-2021-to-2022/\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tableOfContents":[{"slug":"들어가면서","text":"들어가면서","subSections":[]},{"slug":"runtime","text":"runtime","subSections":[]},{"slug":"zero-runtime","text":"zero-runtime","subSections":[{"slug":"critical-css","text":"critical CSS"}]},{"slug":"near-zero-runtime-stitches","text":"near-zero-runtime (stitches)","subSections":[{"slug":"atomic-css","text":"Atomic CSS"}]},{"slug":"맺으면서","text":"맺으면서","subSections":[{"slug":"css-in-js-사용에-고려할-사항","text":"CSS-in-JS 사용에 고려할 사항"},{"slug":"프론트엔드의-흐름-build-time","text":"프론트엔드의 흐름, build-time?"}]}]},"__N_SSG":true}