{"pageProps":{"post":{"title":"image optimization","description":"Next.js static html에서 이미지를 최적화해보자 🤔","tags":["nextjs","blog"],"date":"2022-11-11","content":"\n기본적으로 next/image를 활용하면 이미지를 최적화시킬 수 있다.\n\n다만 static-html-export 환경에서는 이를 제공해주지 않는다고 한다.\n\nhttps://nextjs.org/docs/advanced-features/static-html-export#unsupported-features\n\n[Custom Loader](https://nextjs.org/docs/basic-features/image-optimization#loaders)를 활용해야한다고 하는데...\n\n```js\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n```\n\n[next-export-optimize-images](https://github.com/dc7290/next-export-optimize-images)\n\ngithub star가 100개 정도인 조금은 빈약한 오픈소스 라이브러리입니다.\n하지만 기존 `next/image`의 option에 100% 호환할 만큼 강력하고 적용하는 방법 또한 간편하기에 이를 사용하게 되었습니다.\n\n적용하는 방법 공식문서 그대로 따라하면 됩니다.\nhttps://next-export-optimize-images.vercel.app/docs/getting-started\n\n\n","slug":"nextjs-blog/2-image-optimization","readingMinutes":1,"wordCount":65},"slug":"nextjs-blog/2-image-optimization","mdx":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"기본적으로 next/image를 활용하면 이미지를 최적화시킬 수 있다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다만 static-html-export 환경에서는 이를 제공해주지 않는다고 한다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://nextjs.org/docs/advanced-features/static-html-export#unsupported-features\",\n        children: \"https://nextjs.org/docs/advanced-features/static-html-export#unsupported-features\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://nextjs.org/docs/basic-features/image-optimization#loaders\",\n        children: \"Custom Loader\"\n      }), \"를 활용해야한다고 하는데...\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-js\",\n      children: _jsxs(_components.code, {\n        className: \"language-js code-highlight\",\n        children: [_jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"module\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \".\"\n          }), _jsx(_components.span, {\n            className: \"token property-access\",\n            children: \"exports\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"images\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"{\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"loader\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'custom'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"    \", _jsx(_components.span, {\n            className: \"token literal-property property\",\n            children: \"loaderFile\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \":\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"'./my/image/loader.js'\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [\"  \", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \"\\n\"]\n        }), _jsxs(_components.span, {\n          className: \"code-line\",\n          children: [_jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"}\"\n          }), \"\\n\"]\n        })]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/dc7290/next-export-optimize-images\",\n        children: \"next-export-optimize-images\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"github star가 100개 정도인 조금은 빈약한 오픈소스 라이브러리입니다.\\n하지만 기존 \", _jsx(_components.code, {\n        children: \"next/image\"\n      }), \"의 option에 100% 호환할 만큼 강력하고 적용하는 방법 또한 간편하기에 이를 사용하게 되었습니다.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"적용하는 방법 공식문서 그대로 따라하면 됩니다.\\n\", _jsx(_components.a, {\n        href: \"https://next-export-optimize-images.vercel.app/docs/getting-started\",\n        children: \"https://next-export-optimize-images.vercel.app/docs/getting-started\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}